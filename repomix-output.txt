This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repomix on: 2025-04-10T21:36:35.440Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Repository structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

For more information about Repomix, visit: https://github.com/yamadashy/repomix

================================================================
Repository Structure
================================================================
public/
  BW_logo_light.svg
  BW_logo.svg
  next.svg
  vercel.svg
scripts/
  build-resume.js
src/
  app/
    actions/
      contact.ts
    api/
      projects/
        route.ts
      resume/
        route.ts
    contact/
      page.tsx
    projects/
      [name]/
        page.tsx
      native/
        page.tsx
      web/
        page.tsx
      layout.tsx
      page.tsx
    resume/
      page.tsx
    globals.css
    layout.tsx
    not-found.tsx
    page.tsx
    robots.ts
    sitemap.ts
  components/
    content/
      projects/
        index.tsx
        MediaContainer.tsx
        ProjectCard.tsx
      About.tsx
      Contact.tsx
      ContactForm.tsx
      Experience.tsx
      index.tsx
      Services.tsx
      Socials.tsx
      TechnologyShowcase.tsx
    layout/
      section/
        AnimatedSection.tsx
        index.tsx
        SectionHeading.tsx
      AnimatedHome.tsx
      Footer.tsx
      Header.tsx
      Hero.tsx
      index.tsx
      InitialAnimation.tsx
      Logo.tsx
      ThemeToggle.tsx
    resume/
      Resume.tsx
    ui/
      Announcement.tsx
      Badge.tsx
      Button.tsx
      CTAButton.tsx
      Dropdown.tsx
      index.tsx
      LinkButton.tsx
      WebTechnology.tsx
    seo.tsx
  contexts/
    ThemeContext.tsx
  data/
    projects.json
    resume.json
  lib/
    motion.ts
  styles/
    normalization.css
  types/
    index.ts
    resume.ts
  utils/
    functions/
      animations.ts
      format.ts
    hooks/
      index.ts
      useNavigation.ts
      useSmoothScroll.ts
    getProjects.ts
.eslintrc.json
.gitignore
module.d.ts
next.config.ts
package.json
postcss.config.mjs
README.md
tailwind.config.ts
tsconfig.json

================================================================
Repository Files
================================================================

================
File: public/BW_logo_light.svg
================
<?xml version="1.0" encoding="utf-8"?>
<!-- Generator: Adobe Illustrator 27.8.0, SVG Export Plug-In . SVG Version: 6.00 Build 0)  -->
<svg version="1.1" id="a" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px"
	 viewBox="0 0 93.9 108" style="enable-background:new 0 0 93.9 108;" xml:space="preserve">
<style type="text/css">
	.st0{fill:#FFFFFF;}
	.st1{font-family:'AmericanTypewriter';}
	.st2{font-size:32px;}
	.st3{enable-background:new    ;}
	.st4{fill:#E55F3B;}
	.st5{font-size:55px;}
</style>
<text transform="matrix(1 0 0 1 22.17 67.67)" class="st0 st1 st2">B</text>
<text transform="matrix(1 0 0 1 31.14 82.01)" class="st0 st1 st2">W</text>
<g>
	<g class="st3">
		<path class="st0" d="M4.1,55l21.6-24.8V36L7,57.2l18.8,22.1V85L4.1,59.6V55z"/>
	</g>
</g>
<text transform="matrix(1 0 0 1 56.8006 86.4263)" class="st4 st1 st5">/</text>
<g>
	<g class="st3">
		<path class="st0" d="M89.8,59.6L68.2,85v-5.8L87,57.1L68.2,36v-5.9L89.8,55V59.6z"/>
	</g>
</g>
</svg>

================
File: public/BW_logo.svg
================
<?xml version="1.0" encoding="utf-8"?>
<!-- Generator: Adobe Illustrator 27.8.0, SVG Export Plug-In . SVG Version: 6.00 Build 0)  -->
<svg version="1.1" id="a" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px"
	 viewBox="0 0 93.9 108" style="enable-background:new 0 0 93.9 108;" xml:space="preserve">
<style type="text/css">
	.st0{fill:#231F20;}
	.st1{font-family:'AmericanTypewriter';}
	.st2{font-size:32px;}
	.st3{enable-background:new    ;}
	.st4{fill:#E55F3B;}
	.st5{font-size:55px;}
</style>
<text transform="matrix(1 0 0 1 22.17 67.67)" class="st0 st1 st2">B</text>
<text transform="matrix(1 0 0 1 31.14 82.01)" class="st0 st1 st2">W</text>
<g>
	<g class="st3">
		<path class="st0" d="M4.1,55l21.6-24.8V36L7,57.2l18.8,22.1V85L4.1,59.6V55z"/>
	</g>
</g>
<text transform="matrix(1 0 0 1 52.8006 82.4263)" class="st4 st1 st5">/</text>
<g>
	<g class="st3">
		<path class="st0" d="M89.8,59.6L68.2,85v-5.8l18.8-22.1L68.2,36v-5.9L89.8,55V59.6z"/>
	</g>
</g>
</svg>

================
File: public/next.svg
================
<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 394 80"><path fill="#000" d="M262 0h68.5v12.7h-27.2v66.6h-13.6V12.7H262V0ZM149 0v12.7H94v20.4h44.3v12.6H94v21h55v12.6H80.5V0h68.7zm34.3 0h-17.8l63.8 79.4h17.9l-32-39.7 32-39.6h-17.9l-23 28.6-23-28.6zm18.3 56.7-9-11-27.1 33.7h17.8l18.3-22.7z"/><path fill="#000" d="M81 79.3 17 0H0v79.3h13.6V17l50.2 62.3H81Zm252.6-.4c-1 0-1.8-.4-2.5-1s-1.1-1.6-1.1-2.6.3-1.8 1-2.5 1.6-1 2.6-1 1.8.3 2.5 1a3.4 3.4 0 0 1 .6 4.3 3.7 3.7 0 0 1-3 1.8zm23.2-33.5h6v23.3c0 2.1-.4 4-1.3 5.5a9.1 9.1 0 0 1-3.8 3.5c-1.6.8-3.5 1.3-5.7 1.3-2 0-3.7-.4-5.3-1s-2.8-1.8-3.7-3.2c-.9-1.3-1.4-3-1.4-5h6c.1.8.3 1.6.7 2.2s1 1.2 1.6 1.5c.7.4 1.5.5 2.4.5 1 0 1.8-.2 2.4-.6a4 4 0 0 0 1.6-1.8c.3-.8.5-1.8.5-3V45.5zm30.9 9.1a4.4 4.4 0 0 0-2-3.3 7.5 7.5 0 0 0-4.3-1.1c-1.3 0-2.4.2-3.3.5-.9.4-1.6 1-2 1.6a3.5 3.5 0 0 0-.3 4c.3.5.7.9 1.3 1.2l1.8 1 2 .5 3.2.8c1.3.3 2.5.7 3.7 1.2a13 13 0 0 1 3.2 1.8 8.1 8.1 0 0 1 3 6.5c0 2-.5 3.7-1.5 5.1a10 10 0 0 1-4.4 3.5c-1.8.8-4.1 1.2-6.8 1.2-2.6 0-4.9-.4-6.8-1.2-2-.8-3.4-2-4.5-3.5a10 10 0 0 1-1.7-5.6h6a5 5 0 0 0 3.5 4.6c1 .4 2.2.6 3.4.6 1.3 0 2.5-.2 3.5-.6 1-.4 1.8-1 2.4-1.7a4 4 0 0 0 .8-2.4c0-.9-.2-1.6-.7-2.2a11 11 0 0 0-2.1-1.4l-3.2-1-3.8-1c-2.8-.7-5-1.7-6.6-3.2a7.2 7.2 0 0 1-2.4-5.7 8 8 0 0 1 1.7-5 10 10 0 0 1 4.3-3.5c2-.8 4-1.2 6.4-1.2 2.3 0 4.4.4 6.2 1.2 1.8.8 3.2 2 4.3 3.4 1 1.4 1.5 3 1.5 5h-5.8z"/></svg>

================
File: public/vercel.svg
================
<svg fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1155 1000"><path d="m577.3 0 577.4 1000H0z" fill="#fff"/></svg>

================
File: scripts/build-resume.js
================
// scripts/setup-resume-data.js
import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// Ensure public directory exists
const publicDir = path.join(__dirname, '..', 'public');
if (!fs.existsSync(publicDir)) {
  fs.mkdirSync(publicDir, { recursive: true });
}

// Write the resume data to a JSON file in the public directory
const resumeDataPath = path.join(publicDir, 'resume.json');
fs.writeFileSync(resumeDataPath, JSON.stringify(resumeData, null, 2));

console.log(`Resume data saved to ${resumeDataPath}`);

================
File: src/app/actions/contact.ts
================
'use server'

import { z } from 'zod'
import nodemailer from 'nodemailer'

const schema = z.object({
  name: z.string().min(2, 'Name must be at least 2 characters'),
  email: z.string().email('Invalid email address'),
  message: z.string().min(10, 'Message must be at least 10 characters'),
})

export async function submitContactForm(formData: FormData) {
  const validatedFields = schema.safeParse({
    name: formData.get('name'),
    email: formData.get('email'),
    message: formData.get('message'),
  })

  if (!validatedFields.success) {
    return { success: false, errors: validatedFields.error.flatten().fieldErrors }
  }

  const { name, email, message } = validatedFields.data

  // Create a Nodemailer transporter
  const transporter = nodemailer.createTransport({
    host: process.env.EMAIL_HOST,
    port: parseInt(process.env.EMAIL_PORT || '587'),
    secure: process.env.EMAIL_SECURE === 'true',
    auth: {
      user: process.env.EMAIL_USER,
      pass: process.env.EMAIL_PASS,
    },
  })

  try {
    // Send email
    await transporter.sendMail({
      from: process.env.EMAIL_FROM,
      to: process.env.EMAIL_TO,
      subject: `New contact form submission from ${name}`,
      text: `Name: ${name}\nEmail: ${email}\nMessage: ${message}`,
      html: `<p><strong>Name:</strong> ${name}</p>
             <p><strong>Email:</strong> ${email}</p>
             <p><strong>Message:</strong> ${message}</p>`,
    })

    return { success: true }
  } catch (error) {
    console.error('Error sending email:', error)
    return { success: false, errors: { general: ['Failed to send email. Please try again.'] } }
  }
}

================
File: src/app/api/projects/route.ts
================
import { NextResponse } from 'next/server';
import projectsData from '@/data/projects.json';

export async function GET() {
    return NextResponse.json(projectsData);
}

================
File: src/app/api/resume/route.ts
================
import { NextRequest, NextResponse } from 'next/server';
import fs from 'fs/promises';
import path from 'path';
import latex from 'node-latex';
import { Readable } from 'stream';
import { 
  escapeLatex, 
  formatPhoneNumber, 
  escapeUrl, 
  formatDate 
} from '@/utils/functions/format';

function generateSkillsContent(skills: any[]): string {
  return skills.map((skill, index) => {
    const title = escapeLatex(skill.skill_title);
    const items = escapeLatex(skill.skill_items);
    
    // Adds less vertical space after each item, except the last one
    const verticalSpace = index < skills.length - 1 ? '\\\\[0.2em]' : '\\\\';
    
    return `${title} & ${items} ${verticalSpace}`;
  }).join('\n    ');
}

export async function GET(req: NextRequest) {
  const searchParams = req.nextUrl.searchParams;
  const name = searchParams.get('name');
  
  // Fetch resume data
  let resumeData;
  try {
    // Attempt to load the data file
    const dataPath = path.join(process.cwd(), 'public', 'resume.json');
    const rawData = await fs.readFile(dataPath, 'utf-8');
    resumeData = JSON.parse(rawData);
  } catch (error) {
    console.error('Error loading resume data:', error);
    return NextResponse.json({ success: false, error: 'Failed to load resume data' }, { status: 500 });
  }
  
  return await generateLatexPDF(resumeData);
}

export async function POST(req: NextRequest) {
  try {
    const data = await req.json();
    return await generateLatexPDF(data);
  } catch (error) {
    console.error('Error parsing request JSON:', error);
    return NextResponse.json({ success: false, error: 'Invalid JSON in request body' }, { status: 400 });
  }
}

async function generateLatexPDF(data: any) {
  try {
    const templateName = "resume_v1";
    
    const templatePath = path.join(process.cwd(), 'latex', 'templates', templateName, `${templateName}.tex`);

    try {
      await fs.access(templatePath);
    } catch (error) {
      console.error('Template file not found:', templatePath);
      return NextResponse.json({ success: false, error: 'Template not found' }, { status: 404 });
    }

    let template = await fs.readFile(templatePath, 'utf-8');

    // Replace placeholders with data
    template = template.replace(/FULL_NAME/g, escapeLatex(data.full_name));
    template = template.replace(/PHONE/g, escapeLatex(formatPhoneNumber(data.phone)));
    template = template.replace(/EMAIL/g, escapeLatex(data.email));
    template = template.replace(/SUMMARY/g, escapeLatex(data.summary));

    template = template.replace(/LINKEDIN/g, escapeUrl(data.socials.linkedin_url));
    template = template.replace(/GITHUB/g, escapeUrl(data.socials.github_url));
    template = template.replace(/PORTFOLIO/g, escapeUrl(data.socials.portfolio_url));

    template = template.replace(/ED_INSTITUTION/g, escapeLatex(data.education.institution));
    template = template.replace(/ED_LOCATION/g, escapeLatex(data.education.location));
    template = template.replace(/ED_DATE/g, escapeLatex(`${formatDate(data.education.duration.startDate)} - ${formatDate(data.education.duration.endDate)}`));
    template = template.replace(/ED_DEGREE/g, escapeLatex(data.education.degree));

    // Handle experience entries
    data.experience.forEach((exp: any, index: number) => {
      const companyPlaceholder = `COMPANY_${index + 1}`;
      const datePlaceholder = `DATE_${index + 1}`;
      const titlePlaceholder = `TITLE_${index + 1}`;

      template = template.replace(new RegExp(companyPlaceholder, 'g'), escapeLatex(exp.company));
      template = template.replace(new RegExp(datePlaceholder, 'g'), 
        `${formatDate(exp.duration.startDate)} - ${formatDate(exp.duration.endDate)}`
      );
      template = template.replace(new RegExp(titlePlaceholder, 'g'), escapeLatex(exp.position));

      // Replace bullet points
      exp.description.forEach((bullet: string, bulletIndex: number) => {
        const bulletPlaceholder = `COMP_${index + 1}_BULLET_${bulletIndex + 1}`;
        template = template.replace(new RegExp(bulletPlaceholder, 'g'), escapeLatex(bullet));
      });
    });

    const skillsContent = generateSkillsContent(data.skills);
    template = template.replace(/SKILLS/g, skillsContent);

    // Generate PDF from LaTeX
    const input = Readable.from(template);
    const pdfBuffer = await new Promise<Buffer>((resolve, reject) => {
      const chunks: Buffer[] = [];
      const pdf = latex(input, {
        inputs: path.join(process.cwd(), 'latex', 'templates', templateName),
      });
      pdf.on('data', (chunk: Buffer) => chunks.push(chunk));
      pdf.on('end', () => resolve(Buffer.concat(chunks)));
      pdf.on('error', (err) => {
        console.error('LaTeX compilation error:', err);
        reject(new Error('LaTeX compilation failed'));
      });
    });

    // Save PDF file
    const timestamp = Date.now();
    const fileName = `resume_${timestamp}.pdf`;
    const pdfPath = path.join(process.cwd(), 'public', fileName);
    await fs.writeFile(pdfPath, pdfBuffer);

    return NextResponse.json({ 
      success: true, 
      pdfPath: `/${fileName}` // Return the public URL
    });
  } catch (error) {
    console.error('Error generating LaTeX PDF:', error);
    return NextResponse.json({ 
      success: false, 
      error: (error as Error).message 
    }, { status: 500 });
  }
}

================
File: src/app/contact/page.tsx
================
"use client";
import React from "react";
import Section from "../../components/layout/section";
import ContactForm from "../../components/content/ContactForm";
import {
  AnimatedSection,
  itemVariants,
} from "../../components/layout/section/AnimatedSection";
import { motion } from "framer-motion";
import { LinkButton } from "../../components/ui";

export default function Contact() {
  return (
    <Section id="contact" title="Contact" className="pt-32">
      <AnimatedSection className="w-full flex flex-col items-center">
        <motion.div
          className="text-sm md:text-base lg:text-xl lg:px-2 mb-8 px-8 max-w-2xl text-gray-800 dark:text-gray-200"
          variants={itemVariants}
        >
          I&#39;m always open to new opportunities and would love to discuss how
          my skills and experience could benefit your team. Feel free to reach
          out through the form below, check out my{" "}
          <LinkButton
            href="https://github.com/benWozak"
            className="text-sm md:text-base lg:text-xl text-secondary-600 dark:text-secondary-500"
            target="_blank"
          >
            GitHub
          </LinkButton>{" "}
          or{" "}
          <LinkButton
            href="https://linkedin.com/in/ben-wozak"
            className="text-sm md:text-base lg:text-xl text-secondary-600 dark:text-secondary-500"
            target="_blank"
          >
            LinkedIn
          </LinkButton>
          .
        </motion.div>

        <motion.div className="w-full px-4 lg:px-0" variants={itemVariants}>
          <ContactForm />
        </motion.div>
      </AnimatedSection>
    </Section>
  );
}

================
File: src/app/projects/[name]/page.tsx
================
import { SectionHeading } from "@/components/layout/section/SectionHeading";
import { getProjects, getProjectByName } from "@/utils/getProjects";
import Link from "next/link";
import { Metadata } from "next";
import MediaContainer from "@/components/content/projects/MediaContainer";

type Params = Promise<{ name: string }>;

export async function generateStaticParams() {
  const projects = await getProjects();
  return projects.map((project) => ({
    name: project.name.toLowerCase().replace(/\s+/g, "-"),
  }));
}

export async function generateMetadata({
  params,
}: {
  params: Params;
}): Promise<Metadata> {
  const { name } = await params;
  const projectName = name.replace(/-/g, " ");
  const project = await getProjectByName(projectName);

  return {
    title: project ? `${project.name} | Projects` : "Project Not Found",
    description: project
      ? project.description
      : "Project details not available",
  };
}

export default async function ProjectPage({ params }: { params: Params }) {
  const { name } = await params;
  const projectName = name.replace(/-/g, " ");
  const project = await getProjectByName(projectName);

  if (!project) {
    return <div>Project not found</div>;
  }

  return (
    <div className="container mx-auto px-4 py-16 lg:pt-24">
      <SectionHeading title="Projects" />
      <div className="grid grid-cols-1 md:grid-cols-2 gap-8">
        <MediaContainer project={project} />
        <div>
          <h1 className="text-3xl font-bold mb-4">{project.name}</h1>
          <h2 className="text-2xl font-semibold mb-4">Description</h2>
          <p className="text-gray-600 dark:text-gray-200 mb-6">
            {project.description}
          </p>
          <h2 className="text-2xl font-semibold mb-4">Concept</h2>
          <p className="text-gray-600 dark:text-gray-200 mb-6">
            {project.content.concept}
          </p>
          <h2 className="text-2xl font-semibold mb-4">Solution</h2>
          <p className="text-gray-600 dark:text-gray-200 mb-6">
            {project.content.solution}
          </p>
          <div className="flex space-x-4">
            {!!project.liveUrl ? (
              <Link
                href={project.liveUrl || ""}
                target="_blank"
                rel="noopener noreferrer"
                className="bg-primary-500 text-primary-foreground px-4 py-2 rounded-md hover:bg-primary-600 transition-colors"
              >
                Live Demo
              </Link>
            ) : null}
            {project.githubUrl ? (
              <Link
                href={project.githubUrl}
                target="_blank"
                rel="noopener noreferrer"
                className="bg-secondary-400 dark:bg-secondary-600 text-foreground px-4 py-2 rounded-md hover:bg-secondary-600 hover:dark:bg-secondary-800 transition-colors"
              >
                View Code
              </Link>
            ) : null}
          </div>
        </div>
      </div>
    </div>
  );
}

================
File: src/app/projects/native/page.tsx
================
"use client";

import { useEffect, useState } from "react";
import { getProjects } from "@/utils/getProjects";
import { ProjectCard } from "@/components/content/projects/ProjectCard";
import { SectionHeading } from "@/components/layout/section/SectionHeading";
import { motion, useAnimationControls } from "framer-motion";
import { Project } from "@/types";
import { calculateWaterfallDelay } from "@/utils/functions/animations";

export default function MobileProjectsPage() {
  const [projects, setProjects] = useState<Project[]>([]);
  const [isReady, setIsReady] = useState(false);
  const controls = useAnimationControls();

  useEffect(() => {
    async function loadProjects() {
      const allProjects = await getProjects();
      const mobileProjects = allProjects.filter(
        (project) => project.type === "native"
      );
      setProjects(mobileProjects);

      setTimeout(() => {
        setIsReady(true);
      }, 100);
    }
    loadProjects();
  }, []);

  useEffect(() => {
    if (isReady) {
      controls.start("visible");
    }
  }, [isReady, controls]);

  return (
    <div className="container mx-auto my-16 px-4 py-16 lg:py-8">
      <SectionHeading title="Native Apps" />

      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8 min-h-[25rem]">
        {projects.map((project, index) => (
          <motion.div
            key={project.id}
            custom={index}
            initial="hidden"
            animate={controls}
            variants={{
              hidden: {
                opacity: 0,
                y: 40,
              },
              visible: (i) => ({
                opacity: 1,
                y: 0,
                transition: {
                  delay: calculateWaterfallDelay(i),
                  duration: 1.1,
                  ease: [0.16, 0.1, 0.3, 1],
                },
              }),
            }}
          >
            <ProjectCard index={index} project={project} />
          </motion.div>
        ))}
      </div>
    </div>
  );
}

================
File: src/app/projects/web/page.tsx
================
"use client";

import { useEffect, useState } from "react";
import { getProjects } from "@/utils/getProjects";
import { ProjectCard } from "@/components/content/projects/ProjectCard";
import { SectionHeading } from "@/components/layout/section/SectionHeading";
import { motion, useAnimationControls } from "framer-motion";
import { Project } from "@/types";
import { calculateWaterfallDelay } from "@/utils/functions/animations";

export default function WebProjectsPage() {
  const [projects, setProjects] = useState<Project[]>([]);
  const [isReady, setIsReady] = useState(false);
  const controls = useAnimationControls();

  useEffect(() => {
    async function loadProjects() {
      const allProjects = await getProjects();
      const webProjects = allProjects.filter(
        (project) => project.type === "web"
      );
      setProjects(webProjects);

      setTimeout(() => {
        setIsReady(true);
      }, 100);
    }
    loadProjects();
  }, []);

  useEffect(() => {
    if (isReady) {
      controls.start("visible");
    }
  }, [isReady, controls]);

  return (
    <div className="container mx-auto my-16 px-4 py-16 lg:py-8">
      <SectionHeading title="Web Projects" />

      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8 min-h-[25rem]">
        {projects.map((project, index) => (
          <motion.div
            key={project.id}
            custom={index}
            initial="hidden"
            animate={controls}
            variants={{
              hidden: {
                opacity: 0,
                y: 40,
              },
              visible: (i) => ({
                opacity: 1,
                y: 0,
                transition: {
                  delay: calculateWaterfallDelay(i),
                  duration: 1.1,
                  ease: [0.16, 0.1, 0.3, 1],
                },
              }),
            }}
          >
            <ProjectCard index={index} project={project} />
          </motion.div>
        ))}
      </div>
    </div>
  );
}

================
File: src/app/projects/layout.tsx
================
import { SectionHeading } from "@/components/layout/section/SectionHeading";

export default function Layout({ children }: { children: React.ReactNode }) {
  return (
    <article className="container mx-auto my-16 px-4 py-16 lg:py-8">
      <SectionHeading title="All Projects" />
      {children}
    </article>
  );
}

================
File: src/app/projects/page.tsx
================
"use client";

import { useEffect, useState } from "react";
import { getProjects } from "@/utils/getProjects";
import { ProjectCard } from "@/components/content/projects/ProjectCard";
import { SectionHeading } from "@/components/layout/section/SectionHeading";
import { motion, useAnimationControls } from "framer-motion";
import { Project } from "@/types";
import { calculateWaterfallDelay } from "@/utils/functions/animations";

export default function ProjectsPage() {
  const [projects, setProjects] = useState<Project[]>([]);
  const [isReady, setIsReady] = useState(false);
  const controls = useAnimationControls();

  useEffect(() => {
    async function loadProjects() {
      const loadedProjects = await getProjects();
      setProjects(loadedProjects);

      setTimeout(() => {
        setIsReady(true);
      }, 100);
    }
    loadProjects();
  }, []);

  useEffect(() => {
    if (isReady) {
      controls.start("visible");
    }
  }, [isReady, controls]);

  return (
    <article className="container mx-auto my-16 px-4 py-16 lg:py-8">
      <SectionHeading title="All Projects" />

      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 min-h-[25rem]">
        {projects.map((project, index) => (
          <motion.div
            key={index}
            custom={index}
            initial="hidden"
            animate={controls}
            variants={{
              hidden: {
                opacity: 0,
                y: 40,
              },
              visible: (i) => ({
                opacity: 1,
                y: 0,
                transition: {
                  delay: calculateWaterfallDelay(i),
                  duration: 1.1,
                  ease: [0.16, 0.1, 0.3, 1], // Custom easing for smooth waterfall
                },
              }),
            }}
          >
            <ProjectCard index={index} project={project} />
          </motion.div>
        ))}
      </div>
    </article>
  );
}

================
File: src/app/resume/page.tsx
================
"use client";

import React, { useState, useEffect } from "react";
import Resume from "@/components/resume/Resume";
import { ResumeData } from "@/types/resume";
import resumeData from "@/data/resume.json";
import { toast } from "react-hot-toast";

const loadResumeData = async (): Promise<ResumeData> => {
  try {
    const response = await fetch("/resume.json");

    if (response.ok) {
      return await response.json();
    } else {
      console.warn("Resume data not found, using placeholder data");
      return resumeData as unknown as ResumeData;
    }
  } catch (error) {
    console.error("Error loading resume data:", error);
    return resumeData as unknown as ResumeData;
  }
};

const ResumePage: React.FC = () => {
  const [resumeData, setResumeData] = useState<ResumeData | null>(null);
  const [isLoading, setIsLoading] = useState(true);
  const [isGeneratingPDF, setIsGeneratingPDF] = useState(false);
  const [html2pdfLib, setHtml2pdfLib] = useState<any>(null);

  useEffect(() => {
    // Dynamically import only on client side
    import("html2pdf.js").then((module) => {
      setHtml2pdfLib(() => module.default);
    });

    // Load resume data
    const fetchData = async () => {
      setIsLoading(true);
      const data = await loadResumeData();
      setResumeData(data);
      setIsLoading(false);
    };

    fetchData();
  }, []);

  const handleExportHTMLPDF = () => {
    if (!html2pdfLib) {
      toast.error("PDF generation library not loaded yet");
      return;
    }

    const element = document.getElementById("resume-container");
    if (!element) return;

    setIsGeneratingPDF(true);

    const phoneElements = element.querySelectorAll(".phone-display");
    const emailElements = element.querySelectorAll(".email-display");

    // Store original values
    const originalValues = {
      phones: Array.from(phoneElements).map((el) => el.textContent),
      emails: Array.from(emailElements).map((el) => el.textContent),
    };

    // Redact sensitive information
    phoneElements.forEach((el) => {
      el.textContent = resumeData!.phone;
    });
    emailElements.forEach((el) => {
      el.textContent = resumeData!.email;
    });

    toast.loading("Generating PDF from HTML...");
    const filename = `${resumeData?.full_name.replace(/\s+/g, "_")}_Resume.pdf`;

    const options = {
      margin: [0.3, 0.5, 0.3, 0.5], // [top, right, bottom, left]
      filename: filename,
      image: { type: "jpeg", quality: 0.98 },
      html2canvas: {
        scale: 2,
        useCORS: true,
        letterRendering: true,
        scrollY: 0,
        windowWidth: document.documentElement.offsetWidth,
      },
      jsPDF: {
        unit: "in",
        format: "letter",
        orientation: "portrait",
        compress: true,
        precision: 16, // Higher precision for positioning
      },
      pagebreak: { mode: ["avoid-all"] }, // To prevent text from being cut between pages
    };

    html2pdfLib()
      .set(options)
      .from(element) // Use the original element, but with un-redacted info
      .save()
      .then(() => {
        toast.dismiss();
        toast.success("PDF generated successfully!");

        // Restore original values
        phoneElements.forEach((el, i) => {
          el.textContent = originalValues.phones[i];
        });
        emailElements.forEach((el, i) => {
          el.textContent = originalValues.emails[i];
        });

        setIsGeneratingPDF(false);
      })
      .catch((error: any) => {
        toast.dismiss();
        toast.error("Failed to generate PDF");
        console.error("Error generating PDF:", error);

        // Restore original values on error too
        phoneElements.forEach((el, i) => {
          el.textContent = originalValues.phones[i];
        });
        emailElements.forEach((el, i) => {
          el.textContent = originalValues.emails[i];
        });

        setIsGeneratingPDF(false);
      });
  };

  if (isLoading) {
    return (
      <div className="flex items-center justify-center min-h-screen">
        <div className="text-center">
          <div
            className="spinner-border animate-spin inline-block w-8 h-8 border-4 rounded-full"
            role="status"
          >
            <span className="visually-hidden"></span>
          </div>
          <p className="mt-2">Loading...</p>
        </div>
      </div>
    );
  }

  if (!resumeData) {
    return (
      <div className="flex items-center justify-center min-h-screen">
        <div className="text-center">
          <p className="text-red-500">Resume data not available.</p>
          <button
            className="mt-4 bg-blue-600 text-white px-4 py-2 rounded hover:bg-blue-700 transition-colors"
            onClick={() => window.location.reload()}
          >
            Retry
          </button>
        </div>
      </div>
    );
  }

  return (
    <div className="container mx-auto px-4 py-8">
      <Resume
        data={resumeData}
        onExportPDF={handleExportHTMLPDF}
        isGeneratingPDF={isGeneratingPDF}
        hideContactInfo={true}
      />
    </div>
  );
};

export default ResumePage;

================
File: src/app/globals.css
================
@tailwind base;
@tailwind components;
@tailwind utilities;

@layer base {
  :root {
    --background: 210 20% 98%;
    --foreground: 210 29% 16%;
    --secondary-bg: 210 14% 89%;

    --primary-50: 22 100% 95%;
    --primary-100: 22 100% 90%;
    --primary-200: 22 100% 80%;
    --primary-300: 22 99% 70%;
    --primary-400: 22 99% 60%;
    --primary-500: 22 99% 50%;
    --primary: 22 99% 44%; /* default primary */
    --primary-600: 22 99% 40%;
    --primary-700: 22 99% 35%;
    --primary-800: 22 99% 30%;
    --primary-900: 22 99% 25%;
    --primary-950: 22 99% 15%;

    --primary-foreground: 210 20% 98%;

    --secondary-50: 174 69% 95%;
    --secondary-100: 174 69% 90%;
    --secondary-200: 174 69% 80%;
    --secondary-300: 174 69% 70%;
    --secondary-400: 174 69% 60%;
    --secondary-500: 174 69% 52%; /* default secondary */
    --secondary-600: 174 69% 45%;
    --secondary-700: 174 69% 38%;
    --secondary-800: 174 69% 31%;
    --secondary-900: 174 69% 24%;
    --secondary-950: 174 69% 17%;

    --secondary-foreground: 210 29% 16%;
    --accent: 27 29% 87%;
    --accent-foreground: 210 29% 16%;
  }

  .dark {
    --background: 210 22% 16%;
    --foreground: 0 0% 98%;
    --secondary-bg: 210 18% 24%;

    --primary-50: 22 85% 95%;
    --primary-100: 22 85% 90%;
    --primary-200: 22 85% 80%;
    --primary-300: 22 85% 70%;
    --primary-400: 22 85% 60%;
    --primary-500: 22 85% 50%;
    --primary: 22 85% 44%; /* Slightly de-saturated in dark mode */
    --primary-600: 22 85% 40%;
    --primary-700: 22 85% 35%;
    --primary-800: 22 85% 30%;
    --primary-900: 22 85% 25%;
    --primary-950: 22 85% 15%;

    --primary-foreground: 0 0% 98%;

    --secondary-50: 174 60% 95%;
    --secondary-100: 174 60% 90%;
    --secondary-200: 174 60% 80%;
    --secondary-300: 174 60% 70%;
    --secondary-400: 174 60% 60%;
    --secondary-500: 174 60% 52%; /* Slightly de-saturated in dark mode */
    --secondary-600: 174 60% 45%;
    --secondary-700: 174 60% 38%;
    --secondary-800: 174 60% 31%;
    --secondary-900: 174 60% 24%;
    --secondary-950: 174 60% 17%;

    --secondary-foreground: 210 22% 16%;
    --accent: 27 29% 87%;
    --accent-foreground: 210 22% 16%;
  }
}

@layer base {
  body {
    @apply bg-background text-foreground;
  }
}

@layer utilities {
  .h-screen-dvh {
    height: 100vh;
    height: 100dvh;
  }
}

/* New animations */
@keyframes fadeIn {
  from {
    opacity: 0;
  }
  to {
    opacity: 1;
  }
}

@keyframes fadeUp {
  from {
    opacity: 0;
    transform: translateY(20px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

.animate-fade-in {
  animation: fadeIn 1s ease-out forwards;
}

.animate-fade-up {
  opacity: 0;
  animation: fadeUp 0.5s ease-out forwards;
}

@layer utilities {
  .animate-fade-in {
    animation: fadeIn 1s ease-out forwards;
  }
  .animate-fade-up {
    opacity: 0;
    animation: fadeUp 0.5s ease-out forwards;
  }
}

body:not(.animation-complete) .animate-fade-up {
  animation: none;
  opacity: 0;
}

body.animation-complete .animate-fade-up {
  animation-play-state: running;
}

================
File: src/app/layout.tsx
================
import type { Metadata } from "next";
import { Analytics } from "@vercel/analytics/react";
import { ThemeProvider } from "../contexts/ThemeContext";
import localFont from "next/font/local";
import "./globals.css";
import "../styles/normalization.css";
import { Header, Footer } from "@/components/layout";

const geistSans = localFont({
  src: [
    {
      path: "./fonts/GeistVF.woff",
      weight: "100 900",
      style: "normal",
    },
  ],
  variable: "--font-geist-sans",
});

const geistMono = localFont({
  src: [
    {
      path: "./fonts/GeistMonoVF.woff",
      weight: "100 900",
      style: "normal",
    },
  ],
  variable: "--font-geist-mono",
});

export const metadata: Metadata = {
  metadataBase: new URL("https://v2-benwozak.vercel.app/"),
  title: {
    default: "Ben Wozak | Software Developer",
    template: "%s | Ben Wozak",
  },
  description:
    "Professional software developer specializing in React, Next.js, and modern web technologies. View my portfolio and get in touch for collaborations.",
  keywords: [
    "web developer",
    "software developer",
    "React",
    "Next.js",
    "TypeScript",
    "portfolio",
    "freelance",
    "senior developer",
    "intermediate developer",
  ],
  authors: [{ name: "Ben Wozak" }],
  creator: "Ben Wozak",
  publisher: "Ben Wozak",
  formatDetection: {
    email: false,
    address: false,
    telephone: false,
  },
  openGraph: {
    type: "website",
    locale: "en_US",
    url: "https://v2-benwozak.vercel.app/",
    title: "Ben Wozak | Software Developer",
    description:
      "Explore my projects. Specializing in React, Next.js, and modern web technologies.",
    siteName: "Ben Wozaks Portfolio",
    images: [
      {
        url: "https://v2-benwozak.vercel.app/BW_logo.svg",
        width: 1200,
        height: 630,
        alt: "Ben Wozak - Software Developer",
      },
    ],
  },
  twitter: {
    card: "summary_large_image",
    title: "Ben Wozak | Software Developer",
    description: "Check out my latest web development projects.",
    creator: "@your_twitter_handle",
    images: ["https://v2-benwozak.vercel.app/BW_logo.svg"],
  },
  robots: {
    index: true,
    follow: true,
    googleBot: {
      index: true,
      follow: true,
      "max-video-preview": -1,
      "max-image-preview": "large",
      "max-snippet": -1,
    },
  },
};

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
    <html lang="en" suppressHydrationWarning>
      <body
        className={`${geistSans.variable} ${geistMono.variable} font-sans antialiased`}
      >
        <ThemeProvider>
          <div className="min-h-screen flex flex-col">
            <Header />
            <main className="flex-1 flex items-center justify-center">
              {children}
            </main>
            <Footer />
            {/* <footer className="p-4 text-center text-sm text-foreground">
              © {new Date().getFullYear()} Ben Wozak. All rights reserved.
            </footer> */}
          </div>
        </ThemeProvider>
        <Analytics />
      </body>
    </html>
  );
}

================
File: src/app/not-found.tsx
================
import { Button } from "@/components/ui";

export default function NotFound() {
  return (
    <section className="fixed inset-0 z-50 flex items-center justify-center bg-white dark:bg-gray-900">
      <div className="container flex flex-col items-center justify-center px-5 mx-auto">
        <div className="max-w-md text-center">
          <h2 className="mb-8 font-extrabold text-9xl text-gray-600 dark:text-gray-400">
            <span className="sr-only">Error</span>4🫥4
          </h2>
          <p className="text-2xl font-semibold md:text-4xl">
            Well, this is awkward...
          </p>
          <p className="mt-4 mb-8 text-gray-500 dark:text-gray-400">
            Don't panic. It's all good. You haven't broken the internet. The
            homepage still works, it's cool!
          </p>

          <Button label="Back to homepage" href="/" />
        </div>
      </div>
    </section>
  );
}

================
File: src/app/page.tsx
================
import AnimatedHome from "@/components/layout/AnimatedHome";
import { Hero } from "@/components/layout";
import { About, Services, Projects, Experience } from "@/components/content";

export default function Home() {
  return (
    <AnimatedHome>
      <div className="flex min-h-screen flex-col items-center justify-center">
        <Hero />
        <About />
        <Services />
        <Experience />
        <Projects />
      </div>
    </AnimatedHome>
  );
}

================
File: src/app/robots.ts
================
import { headers } from 'next/headers'

export default async function robots() {
  const headersList = await headers();
  const isVercelDomain = headersList.get('host')?.includes('vercel.app');
  
  if (isVercelDomain) {
    return {
      rules: [
        {
          userAgent: '*',
          disallow: '/',
        },
      ],
      host: 'https://benwozak.dev',
    }
  }
  
  return {
    rules: [
      {
        userAgent: '*',
        allow: '/',
      },
    ],
    sitemap: 'https://benwozak.dev/sitemap.xml',
  }
}

================
File: src/app/sitemap.ts
================
export default async function sitemap() {
  const routes = [
    '',
    '/projects',
  ];

  return routes.map((route) => ({
    url: `https://benwozak.dev${route}`,
    lastModified: new Date().toISOString(),
  }));
}

================
File: src/components/content/projects/index.tsx
================
"use client";

import React from "react";
import Section from "../../layout/section";
import { getProjects } from "@/utils/getProjects";
import { CTAButton } from "../../ui";
import { ProjectCard } from "./ProjectCard";
import {
  AnimatedSection,
  itemVariants,
} from "../../layout/section/AnimatedSection";
import { motion } from "framer-motion";
import { Project } from "@/types";

export function Projects() {
  const [projects, setProjects] = React.useState<Project[]>([]);

  React.useEffect(() => {
    async function fetchProjects() {
      const fetchedProjects = await getProjects();
      setProjects(fetchedProjects.slice(0, 2));
    }
    fetchProjects();
  }, []);

  return (
    <Section
      id="projects"
      title="Projects"
      className="flex items-center flex-1"
    >
      <AnimatedSection>
        {/* <motion.div variants={itemVariants} className="mb-8">
          <p className="mb-4 text-sm md:text-base lg:text-xl text-gray-800 dark:text-gray-200">
            This collection features my side projects where I explore different
            web technologies and concepts outside of my day job.
          </p>
          <p className="text-sm md:text-base lg:text-xl text-gray-800 dark:text-gray-200">
            Through these prototypes, I satisfy my curiosity and expand my web
            development skills through hands-on experimentation with technical
            challenges and emerging tools.
          </p>
        </motion.div> */}
        <div className="grid grid-cols-1 md:grid-cols-2 gap-6 px-4 md:px-0 pt-4">
          {projects.map((project, index) => (
            <motion.div variants={itemVariants} key={index}>
              <ProjectCard index={index} project={project} />
            </motion.div>
          ))}
        </div>

        <motion.div
          className="mt-8 lg:mt-12 flex justify-center"
          variants={itemVariants}
        >
          <CTAButton type="secondary" href="/projects" className="w-72">
            See More
          </CTAButton>
        </motion.div>
      </AnimatedSection>
    </Section>
  );
}

================
File: src/components/content/projects/MediaContainer.tsx
================
"use client";
import React, { useRef, useState, useEffect } from "react";
import Image from "next/image";
import { Project } from "@/types";

type Props = {
  project: Project;
};

function MediaContainer({ project }: Props) {
  const videoRef = useRef<HTMLVideoElement>(null);
  const [isPlaying, setIsPlaying] = useState(false);
  const [isMobile, setIsMobile] = useState(false);

  useEffect(() => {
    const checkMobile = () => {
      setIsMobile(window.innerWidth < 768); // md breakpoint
    };
    checkMobile();
    window.addEventListener("resize", checkMobile);
    return () => window.removeEventListener("resize", checkMobile);
  }, []);

  const handleInteraction = () => {
    if (isMobile) return;
    if (videoRef.current) {
      if (!isPlaying) {
        videoRef.current
          .play()
          .then(() => setIsPlaying(true))
          .catch((error) => console.log("Playback failed:", error));
      } else {
        videoRef.current.pause();
        setIsPlaying(false);
      }
    }
  };

  return (
    <div
      className="xl:w-[600px] h-[400px] bg-gradient-to-br from-secondary-400 via-secondary-500 to-secondary-800 rounded-md"
      onClick={handleInteraction}
      onMouseEnter={() => !isMobile && handleInteraction()}
      onMouseLeave={() => !isMobile && handleInteraction()}
    >
      {project.media.endsWith(".mp4") || project.media.endsWith(".mov") ? (
        <>
          <video
            ref={videoRef}
            src={project.media}
            className="w-full h-full object-fit hidden md:block"
            muted
            loop
            playsInline
            controls={false}
            preload="metadata"
          />
          <Image
            src={project.staticImage}
            alt={project.name}
            width={600}
            height={400}
            className="w-full h-full object-contain rounded-lg shadow-md md:hidden"
          />
        </>
      ) : (
        <Image
          src={project.media}
          alt={project.name}
          width={600}
          height={400}
          className="w-full h-full object-contain rounded-lg shadow-md"
        />
      )}
    </div>
  );
}

export default MediaContainer;

================
File: src/components/content/projects/ProjectCard.tsx
================
"use client";

import React, { useRef, useState, useEffect } from "react";
import Link from "next/link";
import Image from "next/image";
import { Project } from "@/types";
import { Badge } from "../../ui/Badge";

type Props = {
  index: number;
  project: Project;
};

export function ProjectCard({ index, project }: Props) {
  const videoRef = useRef<HTMLVideoElement>(null);
  const [isPlaying, setIsPlaying] = useState(false);
  const [isMobile, setIsMobile] = useState(false);

  useEffect(() => {
    const checkMobile = () => {
      setIsMobile(window.innerWidth < 768); // md breakpoint
    };
    checkMobile();
    window.addEventListener("resize", checkMobile);
    return () => window.removeEventListener("resize", checkMobile);
  }, []);

  const handleInteraction = () => {
    if (isMobile) return;
    if (videoRef.current) {
      if (!isPlaying) {
        videoRef.current
          .play()
          .then(() => setIsPlaying(true))
          .catch((error) => console.log("Playback failed:", error));
      } else {
        videoRef.current.pause();
        setIsPlaying(false);
      }
    }
  };

  return (
    <div
      className="bg-secondary-bg rounded-lg shadow-md overflow-hidden hover:shadow-md hover:shadow-slate-300 hover:dark:shadow-slate-500 transition-all duration-300"
      onClick={handleInteraction}
      onMouseEnter={() => !isMobile && handleInteraction()}
      onMouseLeave={() => !isMobile && handleInteraction()}
    >
      <Link
        href={`/projects/${project.name.toLowerCase().replace(/\s+/g, "-")}`}
        onClick={(e) => e.stopPropagation()} // Prevent link navigation when clicking to play/pause
      >
        <div className="relative h-56 bg-gradient-to-br from-secondary-300 via-secondary-500 to-secondary-700">
          {(!!project.media && project.media?.endsWith(".mp4")) ||
          project.media?.endsWith(".mov") ? (
            <>
              <video
                ref={videoRef}
                src={project.media}
                className="w-full h-full object-fit hidden md:block"
                muted
                loop
                playsInline
                controls={false}
                preload="metadata"
              />
              <Image
                src={project.staticImage}
                alt={project.name}
                layout="fill"
                objectFit="cover"
                className="md:hidden"
              />
            </>
          ) : (
            <Image
              src={project.staticImage}
              alt={project.name}
              layout="fill"
              objectFit="cover"
            />
          )}
          <div className="absolute top-2 right-2">
            <Badge status={project.status} />
          </div>
        </div>
        <div className="p-4">
          <h2 className="text-xl font-semibold ">{project.name}</h2>
          <Badge status={project.type} />
          <p className="text-gray-600 dark:text-gray-200 mt-4">
            {project.description}
          </p>
        </div>
      </Link>
    </div>
  );
}

================
File: src/components/content/About.tsx
================
"use client";
import React from "react";
import Section from "../layout/section";
import Image from "next/image";
import {
  AnimatedSection,
  itemVariants,
} from "../layout/section/AnimatedSection";
import { motion } from "framer-motion";

export function About() {
  return (
    <Section id="about" title="About Me">
      <AnimatedSection className="flex gap-12 flex-col lg:flex-row lg:px-2 mb-4 px-8">
        <motion.div variants={itemVariants}>
          <Image
            src="/Pastel_Ben.jpg"
            alt="photo of Ben Wozak"
            width={475}
            height={300}
            className="rounded-2xl"
          />
        </motion.div>
        <motion.div className="max-w-xl" variants={itemVariants}>
          <p className="text-sm md:text-base lg:text-xl mb-4">
            I am a Software Developer with 6 years of professional experience
            crafting user-interfaces for B2B SaaS products and high traffic
            client-facing websites. I am specialized in all things JavaScript,
            creating elegant user experiences with complex software solutions.
          </p>
          <p className="text-sm md:text-base lg:text-xl">
            Driven by curiosity and a passion for excellence, I try to stay at
            the forefront of web development trends to deliver state-of-the-art
            solutions for clients, businesses and users alike.
          </p>
        </motion.div>
      </AnimatedSection>
    </Section>
  );
}

================
File: src/components/content/Contact.tsx
================
"use client";
import React from "react";
import Section from "../layout/section";
import ContactForm from "./ContactForm";
import {
  AnimatedSection,
  itemVariants,
} from "../layout/section/AnimatedSection";
import { motion } from "framer-motion";
import { LinkButton } from "../ui";

export function Contact() {
  return (
    <Section id="contact" title="Contact">
      <AnimatedSection className="w-full flex flex-col items-center">
        <motion.div
          className="text-sm md:text-base lg:text-xl lg:px-2 mb-8 px-8 max-w-2xl text-gray-800 dark:text-gray-200"
          variants={itemVariants}
        >
          I&#39;m always open to new opportunities and would love to discuss how
          my skills and experience could benefit your team. Feel free to reach
          out through the form below, check out my{" "}
          <LinkButton
            href="https://github.com/benWozak"
            className="text-sm md:text-base lg:text-xl text-secondary-600 dark:text-secondary-500"
            target="_blank"
          >
            GitHub
          </LinkButton>{" "}
          or{" "}
          <LinkButton
            href="https://linkedin.com/in/ben-wozak"
            className="text-sm md:text-base lg:text-xl text-secondary-600 dark:text-secondary-500"
            target="_blank"
          >
            LinkedIn
          </LinkButton>
          .
        </motion.div>

        <motion.div className="w-full px-4 lg:px-0" variants={itemVariants}>
          <ContactForm />
        </motion.div>
      </AnimatedSection>
    </Section>
  );
}

================
File: src/components/content/ContactForm.tsx
================
"use client";

import { useState, useEffect, useRef } from "react";
import { motion } from "framer-motion";
import emailjs from "@emailjs/browser";
import { Button } from "../ui";

export default function ContactForm() {
  const form = useRef<HTMLFormElement>(null);
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [submitSuccess, setSubmitSuccess] = useState(false);
  const [errors, setErrors] = useState<Record<string, string[]>>({});

  useEffect(() => {
    emailjs.init(process.env.NEXT_PUBLIC_KEY!);
  }, []);

  const handleSubmit = async (e: React.FormEvent<HTMLFormElement>) => {
    e.preventDefault();
    setIsSubmitting(true);
    setErrors({});
    try {
      if (!form.current) {
        throw new Error("Form reference is null");
      }

      const serviceId = process.env.NEXT_PUBLIC_SERVICE_ID;
      const templateId = process.env.NEXT_PUBLIC_TEMPLATE_ID;
      const publicKey = process.env.NEXT_PUBLIC_KEY;

      if (!serviceId || !templateId || !publicKey) {
        throw new Error("Missing environment variables");
      }

      const result = await emailjs.sendForm(
        serviceId,
        templateId,
        form.current,
        publicKey
      );
      setSubmitSuccess(true);
    } catch (error: any) {
      // console.error("EmailJS Error:", error);
      setErrors({
        form: ["Failed to send message. Please try again.", error],
      });
    } finally {
      setIsSubmitting(false);
    }
  };

  if (submitSuccess) {
    return (
      <motion.div
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        className="text-center text-green-600 py-28 text-xl lg:text-2xl"
      >
        Thank you for your message! I&#39;ll get back to you soon.
      </motion.div>
    );
  }

  return (
    <motion.form
      ref={form}
      onSubmit={handleSubmit}
      className="w-full max-w-2xl p-8 mx-auto space-y-6 rounded-md border"
      initial={{ opacity: 0 }}
      animate={{ opacity: 1 }}
      transition={{ duration: 0.5 }}
    >
      <div>
        <label
          htmlFor="from_name"
          className="block mb-1 ml-1 text-sm lg:text-base"
        >
          Name
        </label>
        <motion.input
          whileFocus={{ scale: 1.02 }}
          type="text"
          name="from_name"
          id="from_name"
          required
          className="block w-full p-2 rounded border focus:outline-none focus:ring focus:ring-opacity-25 focus:dark:ring-secondary-700 dark:bg-secondary-bg"
        />
        {errors.name && (
          <p className="mt-1 text-sm text-red-600">{errors.name[0]}</p>
        )}
      </div>
      <div>
        <label
          htmlFor="user_email"
          className="block mb-1 ml-1 text-sm lg:text-base"
        >
          Email
        </label>
        <motion.input
          whileFocus={{ scale: 1.02 }}
          type="email"
          name="user_email"
          id="user_email"
          required
          className="block w-full p-2 rounded border focus:outline-none focus:ring focus:ring-opacity-25 focus:dark:ring-secondary-700 dark:bg-secondary-bg"
        />
        {errors.email && (
          <p className="mt-1 text-sm text-red-600">{errors.email[0]}</p>
        )}
      </div>
      <div>
        <label
          htmlFor="message"
          className="block mb-1 ml-1 text-sm lg:text-base"
        >
          Message
        </label>
        <motion.textarea
          whileFocus={{ scale: 1.02 }}
          name="message"
          id="message"
          required
          rows={5}
          className="block w-full p-2 rounded border focus:outline-none focus:ring focus:ring-opacity-25 focus:dark:ring-secondary-700 dark:bg-secondary-bg"
        />
        {errors.message && (
          <p className="mt-1 text-sm text-red-600">{errors.message[0]}</p>
        )}
      </div>
      <Button
        className="w-full lg:text-base text-sm"
        label={isSubmitting ? "Sending..." : "Send Message"}
        disabled={isSubmitting}
        variant="primary"
        onClick={() => form.current?.requestSubmit()}
      />
    </motion.form>
  );
}

================
File: src/components/content/Experience.tsx
================
"use client";

import React from "react";
import Section from "../layout/section";
import {
  AnimatedSection,
  itemVariants,
} from "../layout/section/AnimatedSection";
import { motion } from "framer-motion";

interface TimeBlockProps {
  time: string;
  company: string;
  role: string;
  url?: string;
  description: string;
}

const experiences: TimeBlockProps[] = [
  {
    time: "January, 2025 - Present",
    company: "Cognitive3D",
    role: "Software Engineer",
    url: "https://cognitive3d.com",
    description:
      "A SaaS startup that provides spatial analytics for VR/AR/XR through SDK integrations, enabling businesses to visualize user behavior in immersive environments and make data-driven design decisions.",
  },
  {
    time: "Nov, 2023 - July, 2024",
    company: "Flipp Advertising",
    role: "Senior Web Developer",
    url: "https://flippadvertising.com/",
    description:
      "A digital design agency that offers marketing strategies, brand identity and digital solutions.",
  },
  {
    time: "Sep, 2019 - Nov, 2023",
    company: "chata.ai",
    role: "Team Lead/Frontend Software Engineer",
    url: "https://chata.ai",
    description:
      "A SaaS startup that leverages natural language processing to translate conversational language into precise, executable database queries, trivializing powerful data retrieval for non-technical users.",
  },
  {
    time: "April, 2019 - Dec, 2019",
    company: "KRD Consulting",
    role: "Frontend Developer",
    url: "https://hellokrd.net/",
    description:
      "A specialized consulting firm that provides strategic guidance, operational support, and fundraising expertise to help non-profit organizations optimize their impact, efficiency, and mission-driven goals.",
  },
];

function TimeBlock({ time, company, role, url, description }: TimeBlockProps) {
  return (
    <motion.li className="mb-8 ms-8 lg:mb-20 lg:ms-12" variants={itemVariants}>
      <div className="absolute w-3 h-3 bg-secondary-700 rounded-full mt-1.5 -start-1.5 border border-white dark:border-gray-900 dark:bg-secondary-500"></div>
      <time className="mb-1 text-sm lg:text-base font-normal leading-none text-secondary-800 dark:text-secondary-500">
        {time}
      </time>
      <h3 className="text-lg lg:text-xl font-semibold text-gray-900 dark:text-white">
        <span className="text-primary dark:text-primary-500">{role}</span>{" "}
        <a
          href={url}
          target="_blank"
          rel="noopener noreferrer"
          className="hover:text-secondary-500"
        >
          {"@"}
          {company}
        </a>
      </h3>

      <p className="mb-4 text-sm lg:text-base font-normal text-gray-600 dark:text-gray-200">
        {description}
      </p>
    </motion.li>
  );
}

export function Experience() {
  return (
    <Section id="experience" title="Professional Experience">
      <AnimatedSection className="relative border-s border-primary-500 dark:border-primary-500 py-10 mx-8 lg:mx-0">
        {experiences.map((exp, index) => (
          <motion.ol key={index} variants={itemVariants}>
            <TimeBlock {...exp} />
          </motion.ol>
        ))}
      </AnimatedSection>
    </Section>
  );
}

================
File: src/components/content/index.tsx
================
export { TechnologyShowcase } from "./TechnologyShowcase";
export { Socials } from "./Socials";
export { About } from "./About";
export { Experience } from "./Experience";
export { Services } from "./Services";
export { Projects } from "./projects";
export { Contact } from "./Contact";

================
File: src/components/content/Services.tsx
================
"use client";
import React, { use } from "react";
import Section from "../layout/section";
import {
  AnimatedSection,
  itemVariants,
} from "../layout/section/AnimatedSection";
import { motion } from "framer-motion";

type ServiceItemProps = {
  title: string;
  description: string;
};

const serviceItems: ServiceItemProps[] = [
  {
    title: "Custom Website",
    description:
      "Tailored web solutions designed specifically for your brand and business needs, with attention to detail and modern aesthetics.",
  },
  {
    title: "E-commerce Solutions",
    description:
      "Complete online store implementation with secure payment processing, inventory management, and a seamless shopping experience.",
  },
  {
    title: "Flexible Content Management",
    description:
      "Easy-to-use systems that put you in control of your content, allowing updates without technical knowledge or developer assistance.",
  },
  {
    title: "Affordability",
    description:
      "Competitive rates with flexible payment options tailored to your budget, ensuring high-quality results without breaking the bank.",
  },
  {
    title: "Professional Support",
    description:
      "Ongoing & reliable technical assistance, timely maintenance, and expert advice whenever you need it for your digital properties.",
  },
  {
    title: "Flexible Hosting Options",
    description:
      "Scalable hosting solutions that grow with your business, from shared environments to dedicated infrastructure with managed services.",
  },
];

const ServiceItem = ({ title, description }: ServiceItemProps) => (
  <div className="flex">
    <svg
      xmlns="http://www.w3.org/2000/svg"
      fill="none"
      viewBox="0 0 24 24"
      stroke="currentColor"
      aria-hidden="true"
      className="flex-shrink-0 w-6 h-6 text-secondary-700 dark:text-secondary-500"
    >
      <path
        strokeLinecap="round"
        strokeLinejoin="round"
        strokeWidth="2"
        d="M5 13l4 4L19 7"
      ></path>
    </svg>
    <div className="ml-3">
      <dt className="text-lg font-medium text-secondary-700 dark:text-secondary-500">
        {title}
      </dt>
      <dd className="mt-2">{description}</dd>
    </div>
  </div>
);

export function Services() {
  return (
    <Section id="services" title="Freelance Services">
      <AnimatedSection>
        <div className="mx-auto max-w-7xl sm:px-6 lg:px-8">
          <dl className="mt-12 space-y-10 sm:space-y-0 sm:grid sm:grid-cols-2 sm:gap-x-6 sm:gap-y-12 lg:grid-cols-3 lg:gap-x-8">
            {serviceItems.map((service, index) => (
              <motion.div key={index} variants={itemVariants}>
                <ServiceItem
                  title={service.title}
                  description={service.description}
                />
              </motion.div>
            ))}
          </dl>
        </div>
      </AnimatedSection>
    </Section>
  );
}

================
File: src/components/content/Socials.tsx
================
import React from "react";
import Link from "next/link";
import { SiGithub, SiLinkedin } from "react-icons/si";

type Props = {
  size: "sm" | "md" | "lg" | "xl";
};

const SIZE_VARIANTS = {
  sm: 16,
  md: 24,
  lg: 32,
  xl: 48,
};

export function Socials({ size }: Props) {
  return (
    <div className="flex flex-wrap gap-4 justify-center max-w-2xl">
      <div className="w-6 h-6">
        <Link
          href="https://github.com/benWozak"
          target="_blank"
          aria-label="github"
        >
          <SiGithub
            size={size ? SIZE_VARIANTS[size] : 24}
            className="text-foreground/70 hover:text-secondary-500 transition-all"
          />
        </Link>
      </div>
      <div className="w-6 h-6">
        <Link
          href="https://linkedin.com/in/ben-wozak"
          target="_blank"
          aria-label="linkedin"
        >
          <SiLinkedin
            size={size ? SIZE_VARIANTS[size] : 24}
            className="text-foreground/70 hover:text-secondary-500 transition-all"
          />
        </Link>
      </div>
    </div>
  );
}

================
File: src/components/content/TechnologyShowcase.tsx
================
import { WebTechnology } from "../ui/WebTechnology";
import {
  SiNextdotjs,
  SiReact,
  SiTypescript,
  SiTailwindcss,
  SiNodedotjs,
  SiPostgresql,
  SiVuedotjs,
  SiSass,
  SiLaravel,
  SiPython,
  SiGraphql,
  SiDocker,
  SiSqlite,
} from "react-icons/si";

import { FaAws } from "react-icons/fa";

export function TechnologyShowcase() {
  const primaryStack = [
    {
      name: "Tailwind",
      icon: <SiTailwindcss className="w-4 h-4 lg:w-6 lg:h-6" />,
    },
    {
      name: "TypeScript",
      icon: <SiTypescript className="w-4 h-4 lg:w-6 lg:h-6" />,
    },
    { name: "React", icon: <SiReact className="w-4 h-4 lg:w-6 lg:h-6" /> },
    {
      name: "Next.js",
      icon: <SiNextdotjs className="w-4 h-4 lg:w-6 lg:h-6" />,
    },
    {
      name: "Postgres",
      icon: <SiPostgresql className="w-4 h-4 lg:w-6 lg:h-6" />,
    },
  ];
  const secondaryStack = [
    { name: "Vue", icon: <SiVuedotjs className="w-4 h-4 lg:w-6 lg:h-6" /> },
    { name: "Sass", icon: <SiSass className="w-4 h-4 lg:w-6 lg:h-6" /> },
    {
      name: "Node.js",
      icon: <SiNodedotjs className="w-4 h-4 lg:w-6 lg:h-6" />,
    },
    { name: "Laravel", icon: <SiLaravel className="w-4 h-4 lg:w-6 lg:h-6" /> },
    { name: "Python", icon: <SiPython className="w-4 h-4 lg:w-6 lg:h-6" /> },
    { name: "GraphQL", icon: <SiGraphql className="w-4 h-4 lg:w-6 lg:h-6" /> },
    { name: "Sqlite", icon: <SiSqlite className="w-4 h-4 lg:w-6 lg:h-6" /> },
    { name: "AWS", icon: <FaAws className="w-4 h-4 lg:w-6 lg:h-6" /> },
    { name: "Docker", icon: <SiDocker className="w-4 h-4 lg:w-6 lg:h-6" /> },
  ];

  return (
    <div>
      <div className="flex items-center justify-center gap-4 lg:gap-6 uppercase text-sm lg:text-md font-semibold mb-4">
        <div className="w-16 lg:w-24 h-0.5 lg:h-1 rounded-full bg-primary"></div>
        Main Stack
        <div className="w-16 lg:w-24 h-0.5 lg:h-1 rounded-full bg-primary"></div>
      </div>
      <div className="flex flex-wrap gap-2 lg:gap-4 justify-center max-w-2xl">
        {primaryStack.map((tech) => (
          <WebTechnology key={tech.name} name={tech.name} icon={tech.icon} />
        ))}
      </div>

      <div className="flex items-center justify-center gap-4 lg:gap-6 uppercase text-sm lg:text-md font-semibold my-4">
        <div className="w-16 lg:w-24 h-0.5 lg:h-1 rounded-full bg-primary"></div>
        Supporting
        <div className="w-16 lg:w-24 h-0.5 lg:h-1 rounded-full bg-primary"></div>
      </div>
      <div className="flex flex-wrap gap-2 lg:gap-4 justify-center max-w-2xl">
        {secondaryStack.map((tech) => (
          <WebTechnology key={tech.name} name={tech.name} icon={tech.icon} />
        ))}
      </div>
    </div>
  );
}

================
File: src/components/layout/section/AnimatedSection.tsx
================
"use client";

import { motion, useInView } from "framer-motion";
import { useRef, ReactNode } from "react";

const containerVariants = {
  hidden: { opacity: 0 },
  visible: {
    opacity: 1,
    transition: {
      duration: 1,
      staggerChildren: 0.2,
      delayChildren: 0.3,
    },
  },
};

const itemVariants = {
  hidden: { opacity: 0, y: 30 },
  visible: {
    opacity: 1,
    y: 0,
    transition: {
      duration: 1,
      ease: "easeOut",
    },
  },
};

interface AnimatedSectionProps {
  children: ReactNode;
  className?: string;
}

export function AnimatedSection({
  children,
  className = "",
}: AnimatedSectionProps) {
  const ref = useRef(null);
  const isInView = useInView(ref, { once: true, amount: 0.3 });

  return (
    <motion.div
      ref={ref}
      variants={containerVariants}
      initial="hidden"
      animate={isInView ? "visible" : "hidden"}
      className={className}
    >
      {children}
    </motion.div>
  );
}

export { itemVariants };

================
File: src/components/layout/section/index.tsx
================
import React from "react";
import { SectionHeading } from "./SectionHeading";

type Props = {
  id: string;
  title: string;
  children: React.ReactNode;
  className?: string;
};

export default function Section({ id, title, children }: Props) {
  return (
    <section id={id} className="w-full max-w-4xl mb-16 pt-16">
      <SectionHeading title={title} />
      {children}
    </section>
  );
}

================
File: src/components/layout/section/SectionHeading.tsx
================
"use client";
import React from "react";
import { AnimatedSection, itemVariants } from "./AnimatedSection";
import { motion } from "framer-motion";

interface SectionHeadingProps {
  title: string;
}

export function SectionHeading({ title }: SectionHeadingProps) {
  return (
    <AnimatedSection>
      <motion.div
        className="relative mb-8 flex gap-4 items-center"
        variants={itemVariants}
      >
        <div className="w-8 lg:w-16 h-0.5 lg:h-1 rounded-full bg-primary"></div>
        <h2 className="inline-block text-2xl font-bold py-2 lg:px-4 uppercase tracking-wider">
          {title}
        </h2>
      </motion.div>
    </AnimatedSection>
  );
}

================
File: src/components/layout/AnimatedHome.tsx
================
"use client";

import { useState, useEffect } from "react";
import { motion, AnimatePresence } from "framer-motion";
import InitialAnimation from "./InitialAnimation";

const ANIMATION_SHOWN_KEY = "animationShown";
const ANIMATION_TIMESTAMP_KEY = "animationTimestamp";
const EXPIRATION_TIME = 24 * 60 * 60 * 1000; // extends reset to 24 hours

export default function AnimatedHome({
  children,
}: {
  children: React.ReactNode;
}) {
  const [showHomePage, setShowHomePage] = useState(true);

  useEffect(() => {
    const checkAnimationStatus = () => {
      const animationShown = sessionStorage.getItem(ANIMATION_SHOWN_KEY);
      const animationTimestamp = localStorage.getItem(ANIMATION_TIMESTAMP_KEY);

      if (!animationShown) {
        const currentTime = new Date().getTime();
        if (
          !animationTimestamp ||
          currentTime - parseInt(animationTimestamp) > EXPIRATION_TIME
        ) {
          setShowHomePage(false);
          sessionStorage.setItem(ANIMATION_SHOWN_KEY, "true");
          localStorage.setItem(ANIMATION_TIMESTAMP_KEY, currentTime.toString());
        }
      }
    };

    checkAnimationStatus();
  }, []);

  const handleAnimationComplete = () => {
    setShowHomePage(true);
  };

  return (
    <AnimatePresence mode="wait">
      {!showHomePage ? (
        <motion.div
          className="z-50"
          key="initial-animation"
          initial={{ opacity: 1 }}
          exit={{ opacity: 0 }}
          transition={{ duration: 0.7 }}
        >
          <InitialAnimation onComplete={handleAnimationComplete} />
        </motion.div>
      ) : (
        <motion.div
          key="home-page"
          initial={{ opacity: 0 }}
          animate={{ opacity: 1 }}
          transition={{ duration: 0.7 }}
        >
          {children}
        </motion.div>
      )}
    </AnimatePresence>
  );
}

================
File: src/components/layout/Footer.tsx
================
"use client";

import { useState, useEffect } from "react";
import Logo from "./Logo";
import { LinkButton } from "../ui/LinkButton";
import { Socials } from "../content";
import { useNavigation } from "@/utils/hooks";

type Props = {};

export function Footer({}: Props) {
  const [isScrolled, setIsScrolled] = useState(false);
  const navItems = useNavigation();

  useEffect(() => {
    const handleScroll = () => {
      setIsScrolled(window.scrollY > 0);
    };

    window.addEventListener("scroll", handleScroll);
    return () => window.removeEventListener("scroll", handleScroll);
  }, []);

  return (
    <footer className="text-sm text-foreground">
      <div className="mx-auto max-w-5xl px-4 py-16 sm:px-6 lg:px-8">
        <div className="flex justify-center">
          <Logo />
        </div>

        <p className="mx-auto mt-6 max-w-md text-center leading-relaxed text-gray-500">
          Your vision, expertly developed - from concept to completion.
          Transforming innovative ideas into impactful digital experiences.
        </p>

        <ul className="mt-12 flex flex-wrap justify-center gap-6 md:gap-8 lg:gap-12">
          {navItems.map((item) => {
            return (
              <li key={item.href}>
                <LinkButton
                  href={item.href}
                  className="text-gray-700 dark:text-gray-200 transition hover:text-gray-700/75"
                >
                  {item.label}
                </LinkButton>
              </li>
            );
          })}
        </ul>

        <div className="mt-12 flex justify-center gap-6 md:gap-8">
          <Socials size="md" />
        </div>
      </div>
    </footer>
  );
}

================
File: src/components/layout/Header.tsx
================
"use client";

import { useState, useEffect } from "react";
import { motion, AnimatePresence } from "framer-motion";
import Logo from "./Logo";
import { ThemeToggle } from "./ThemeToggle";
import { LinkButton } from "../ui/LinkButton";
import { useNavigation } from "@/utils/hooks";

export function Header() {
  const [isScrolled, setIsScrolled] = useState(false);
  const [isMobileMenuOpen, setIsMobileMenuOpen] = useState(false);
  const navItems = useNavigation();

  useEffect(() => {
    const handleScroll = () => {
      setIsScrolled(window.scrollY > 0);
    };

    window.addEventListener("scroll", handleScroll);
    return () => window.removeEventListener("scroll", handleScroll);
  }, []);

  const toggleMobileMenu = () => {
    setIsMobileMenuOpen(!isMobileMenuOpen);
  };

  return (
    <header
      className={`fixed top-0 left-0 right-0 z-50 transition-all duration-300 ease-in-out ${
        isScrolled
          ? "bg-white/70 dark:bg-gray-900/70 backdrop-blur-md shadow-md"
          : "bg-transparent"
      }`}
    >
      <div className="mx-auto max-w-screen-xl px-4 sm:px-6 lg:px-8">
        <div className="flex h-16 items-center justify-between">
          <div className="flex-1 md:flex md:items-center md:gap-12">
            <Logo />
          </div>

          <div className="md:flex md:items-center md:gap-12">
            <nav aria-label="Global" className="hidden md:block">
              <ul className="flex items-center gap-6 text-sm">
                {navItems.map((item) => (
                  <li key={item.href}>
                    <LinkButton href={item.href}>{item.label}</LinkButton>
                  </li>
                ))}
              </ul>
            </nav>

            <div className="flex items-center gap-4">
              <div className="sm:flex sm:gap-4">
                <ThemeToggle />
              </div>

              <div className="block md:hidden">
                <button
                  className="rounded bg-gray-100 p-2 text-gray-600 transition hover:text-gray-600/75 dark:bg-gray-800 dark:text-gray-200"
                  onClick={toggleMobileMenu}
                  aria-expanded={isMobileMenuOpen}
                  aria-label="Toggle mobile menu"
                >
                  <svg
                    xmlns="http://www.w3.org/2000/svg"
                    className="size-5"
                    fill="none"
                    viewBox="0 0 24 24"
                    stroke="currentColor"
                    strokeWidth="2"
                  >
                    <path
                      strokeLinecap="round"
                      strokeLinejoin="round"
                      d="M4 6h16M4 12h16M4 18h16"
                    />
                  </svg>
                </button>
              </div>
            </div>
          </div>
        </div>
      </div>

      <AnimatePresence>
        {isMobileMenuOpen && (
          <motion.div
            initial={{ opacity: 0, y: "-100%" }}
            animate={{ opacity: 1, y: 0 }}
            exit={{ opacity: 0, y: "-100%" }}
            transition={{ duration: 0.3, ease: "easeInOut" }}
            className="fixed h-screen-dvh inset-0 z-50 bg-white/80 dark:bg-gray-900/90 backdrop-blur-md"
          >
            <div className="flex min-h-full flex-col items-center justify-center pt-16">
              <span
                className="absolute top-2 left-4"
                onClick={() => setIsMobileMenuOpen(false)}
              >
                <Logo />
              </span>
              <button
                onClick={toggleMobileMenu}
                className="absolute top-4 right-4 p-2 text-gray-600 dark:text-gray-200"
                aria-label="Close mobile menu"
              >
                <svg
                  xmlns="http://www.w3.org/2000/svg"
                  className="h-6 w-6"
                  fill="none"
                  viewBox="0 0 24 24"
                  stroke="currentColor"
                >
                  <path
                    strokeLinecap="round"
                    strokeLinejoin="round"
                    strokeWidth={2}
                    d="M6 18L18 6M6 6l12 12"
                  />
                </svg>
              </button>
              <nav className="text-center">
                <ul className="space-y-8">
                  {navItems.map((item) => (
                    <li key={item.href}>
                      <LinkButton href={item.href} onClick={toggleMobileMenu}>
                        {item.label}
                      </LinkButton>
                    </li>
                  ))}
                </ul>
              </nav>
            </div>
          </motion.div>
        )}
      </AnimatePresence>
    </header>
  );
}

================
File: src/components/layout/Hero.tsx
================
"use client";

import { motion } from "framer-motion";
import { TechnologyShowcase, Socials } from "../content";
import { CTAButton } from "../ui";

const containerVariants = {
  hidden: { opacity: 0 },
  visible: {
    opacity: 1,
    transition: {
      duration: 1,
      staggerChildren: 0.1,
      delayChildren: 0.2,
    },
  },
};

const itemVariants = {
  hidden: { opacity: 0, y: 30 },
  visible: {
    opacity: 1,
    y: 0,
    transition: {
      duration: 1,
      ease: "easeOut",
    },
  },
};

export function Hero() {
  return (
    <motion.section
      className="relative h-auto w-full flex flex-col items-center pt-16 md:pt-24 lg:pt-32 mb-32"
      variants={containerVariants}
      initial="hidden"
      animate="visible"
    >
      <div className="absolute h-[20%] w-[20%] top-[20%] lg:top-[30%] left-[50%] -translate-x-1/2 bg-primary-600 dark:bg-primary rounded-full blur-[110px]"></div>
      <motion.h1
        className="w-full text-3xl md:text-4xl lg:text-6xl max-w-3xl my-6 lg:mb-8 font-bold text-center leading-8"
        variants={itemVariants}
      >
        <span className="text-primary-500">Full-Stack</span> Software Developer
      </motion.h1>

      <motion.h1
        className="w-full text-xl md:text-2xl lg:text-3xl max-w-3xl font-bold text-center px-12 leading-6"
        variants={itemVariants}
      >
        Specializing in{" "}
        <span className="text-primary-500 dark:text-secondary-500">
          Frontend
        </span>{" "}
        Web Technologies
      </motion.h1>

      <motion.div className="mt-6 lg:mt-10 flex gap-4" variants={itemVariants}>
        <CTAButton href="/contact">Get in Touch</CTAButton>
        <CTAButton type="secondary" href="/resume">
          View CV
        </CTAButton>
      </motion.div>

      <motion.div className="mt-4 mb-8 lg:mt-6" variants={itemVariants}>
        <Socials size="lg" />
      </motion.div>

      <motion.div
        className="flex flex-wrap gap-5 md:flex md:flex-row items-center justify-center lg:h-24 h-auto w-[80%] lg:mx-auto mx-2"
        variants={itemVariants}
      >
        <TechnologyShowcase />
      </motion.div>
    </motion.section>
  );
}

================
File: src/components/layout/index.tsx
================
export { Hero } from "./Hero";
export { ThemeToggle } from "./ThemeToggle";
export { Header } from "./Header";
export { Footer } from "./Footer";

================
File: src/components/layout/InitialAnimation.tsx
================
"use client";

import { useState, useEffect } from "react";
import { motion, AnimatePresence } from "framer-motion";

const words = ["Your Vision", "Expertly Developed"];

export default function InitialAnimation({
  onComplete,
}: {
  onComplete: () => void;
}) {
  const [currentWordIndex, setCurrentWordIndex] = useState(0);
  const [currentText, setCurrentText] = useState("");
  const [isTypingComplete, setIsTypingComplete] = useState(false);
  const [showCursor, setShowCursor] = useState(true);

  useEffect(() => {
    if (currentWordIndex < words.length) {
      if (currentText.length < words[currentWordIndex].length) {
        const timer = setTimeout(() => {
          setCurrentText(
            words[currentWordIndex].slice(0, currentText.length + 1)
          );
        }, 60); // typing speed
        return () => clearTimeout(timer);
      } else if (currentWordIndex === 0) {
        const timer = setTimeout(() => {
          setCurrentWordIndex(1);
          setCurrentText("");
        }, 1000); // pause between words
        return () => clearTimeout(timer);
      } else {
        setIsTypingComplete(true);
      }
    }
  }, [currentWordIndex, currentText]);

  useEffect(() => {
    if (isTypingComplete) {
      const timer = setTimeout(() => {
        onComplete();
      }, 1000); // delay before fading out
      return () => clearTimeout(timer);
    }
  }, [isTypingComplete, onComplete]);

  useEffect(() => {
    const cursorInterval = setInterval(() => {
      setShowCursor((prev) => !prev);
    }, 530); // Blinking speed
    return () => clearInterval(cursorInterval);
  }, []);

  return (
    <AnimatePresence>
      <motion.div
        className="fixed inset-0 flex items-center justify-center bg-background text-foreground"
        initial={{ opacity: 1 }}
        animate={{ opacity: 1 }}
        exit={{ opacity: 0 }}
        transition={{ duration: 0.7 }}
      >
        <div className="text-3xl md:text-6xl font-bold font-mono">
          {currentText}
          <span
            className={`inline-block w-0.5 h-10 lg:h-16 ml-1 ${
              showCursor ? "bg-foreground" : "bg-transparent"
            }`}
          >
            &nbsp;
          </span>
        </div>
      </motion.div>
    </AnimatePresence>
  );
}

================
File: src/components/layout/Logo.tsx
================
"use client";
import React, { useEffect, useState } from "react";
import Image from "next/image";
import Link from "next/link";
import { usePathname } from "next/navigation";
import { useTheme } from "@/contexts/ThemeContext";
import { useSmoothScroll } from "@/utils/hooks/useSmoothScroll";

export default function Logo() {
  const { scrollToTop } = useSmoothScroll();
  const { theme } = useTheme();
  const [logoSrc, setLogoSrc] = useState("/BW_logo.svg");
  const pathname = usePathname();

  useEffect(() => {
    const updateLogoSrc = () => {
      if (theme === "system") {
        const isDarkMode = window.matchMedia(
          "(prefers-color-scheme: dark)"
        ).matches;
        setLogoSrc(isDarkMode ? "/BW_logo_light.svg" : "/BW_logo.svg");
      } else {
        setLogoSrc(theme === "dark" ? "/BW_logo_light.svg" : "/BW_logo.svg");
      }
    };

    updateLogoSrc();

    const mediaQuery = window.matchMedia("(prefers-color-scheme: dark)");
    mediaQuery.addListener(updateLogoSrc);

    return () => mediaQuery.removeListener(updateLogoSrc);
  }, [theme]);

  const handleLogoClick = (e: React.MouseEvent) => {
    if (pathname === "/") {
      e.preventDefault();
      scrollToTop();
    }
  };

  return (
    <Link
      href="/"
      className="block hover:cursor-pointer"
      onClick={handleLogoClick}
    >
      <Image
        src={logoSrc}
        alt="Brand Logo"
        width={187.8}
        height={216}
        className="h-16 w-auto"
      />
    </Link>
  );
}

================
File: src/components/layout/ThemeToggle.tsx
================
"use client";

import { useTheme } from "../../contexts/ThemeContext";
import { Sun, Moon, Laptop } from "lucide-react";
import { Dropdown } from "../ui";

export function ThemeToggle() {
  const { theme, setTheme } = useTheme();

  const options = [
    { value: "light", label: "Light", icon: <Sun size={16} /> },
    { value: "dark", label: "Dark", icon: <Moon size={16} /> },
    { value: "system", label: "System", icon: <Laptop size={16} /> },
  ];

  return (
    <Dropdown
      options={options}
      value={theme}
      onChange={(value) => setTheme(value as "light" | "dark" | "system")}
    />
  );
}

================
File: src/components/resume/Resume.tsx
================
import React, { useEffect, useState } from "react";
import {
  FaLinkedin,
  FaGithub,
  FaGlobe,
  FaPhone,
  FaEnvelope,
  FaDownload,
  FaAddressCard,
} from "react-icons/fa";
import { ResumeData } from "../../types/resume";
import { Button, Announcement } from "../ui";
import { cleanUrl } from "../../utils/functions/format";

interface ResumeProps {
  data: ResumeData;
  onExportPDF: () => void;
  isGeneratingPDF?: boolean;
  hideContactInfo?: boolean;
}

const Resume: React.FC<ResumeProps> = ({
  data,
  onExportPDF,
  isGeneratingPDF = false,
  hideContactInfo = true,
}) => {
  const [isSafari, setIsSafari] = useState(false);

  useEffect(() => {
    // Detect Safari browser
    const userAgent = navigator.userAgent.toLowerCase();
    const isSafariBrowser = /^((?!chrome|android).)*safari/i.test(userAgent);
    const isIOS = /iphone|ipad|ipod/.test(userAgent);
    setIsSafari(isSafariBrowser || isIOS);

    const handleResize = () => {
      const viewport = document.querySelector('meta[name="viewport"]');
      if (window.innerWidth < 768) {
        // For mobile screens, set initial scale to zoom out a bit
        viewport?.setAttribute(
          "content",
          "width=device-width, initial-scale=0.85, maximum-scale=1.0, user-scalable=yes"
        );
      } else {
        // Reset for larger screens
        viewport?.setAttribute(
          "content",
          "width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=yes"
        );
      }
    };
    handleResize();

    window.addEventListener("resize", handleResize);

    return () => window.removeEventListener("resize", handleResize);
  }, []);

  return (
    <div className="relative w-full min-w-[320px] mx-auto pt-4 mt-12 md:mt-16 font-[helvetica]">
      <div className="w-full max-w-4xl mx-auto mb-4 flex flex-col md:flex-row justify-between gap-4 print:hidden">
        <div>
          <Announcement />
        </div>
        <div className="flex flex-row justify-end gap-2">
          <Button
            icon={<FaDownload />}
            label="Download PDF"
            onClick={onExportPDF}
            // disabled={isGeneratingPDF || isSafari}
            disabled={true}
            disabledReason={
              isSafari ? "PDF download not available on mobile" : "Download PDF"
            }
            variant="primary"
          />
          <Button
            icon={<FaAddressCard />}
            label="Contact Me"
            href="/#contact"
            variant="secondary"
          />
        </div>
      </div>

      {/* Resume Container */}
      <div
        id="resume-container"
        className="bg-white shadow-lg p-4 sm:p-8 max-w-4xl mx-auto rounded overflow-x-auto"
      >
        {/* Header */}
        <header className="text-center mb-4">
          <h1 className="text-2xl sm:text-3xl font-bold uppercase mb-2 text-gray-900">
            {data.full_name}
          </h1>
          <div className="flex flex-wrap justify-center gap-2 sm:gap-4 text-xs sm:text-sm mb-1">
            <span className="flex items-center gap-1 text-gray-900">
              <FaPhone className="text-gray-600" />
              <span
                className={`phone-display ${hideContactInfo ? "blur-sm" : ""}`}
              >
                {hideContactInfo ? "(555) 555-5555" : data.phone}
              </span>
            </span>
            <span className="flex items-center gap-1 text-gray-900">
              <FaEnvelope className="text-gray-600" />
              <span
                className={`email-display ${hideContactInfo ? "blur-sm" : ""}`}
              >
                {hideContactInfo ? "redacted@email.com" : data.email}
              </span>
            </span>
          </div>
          <div className="flex flex-wrap justify-center gap-2 sm:gap-4 text-xs sm:text-sm">
            <a
              href={data.socials.linkedin_url}
              target="_blank"
              rel="noopener noreferrer"
              className="flex items-center gap-1 text-blue-700 hover:underline"
            >
              <FaLinkedin /> {cleanUrl(data.socials.linkedin_url)}
            </a>
            <span className="text-gray-400 hidden sm:inline">◆</span>
            <a
              href={data.socials.github_url}
              target="_blank"
              rel="noopener noreferrer"
              className="flex items-center gap-1 text-blue-700 hover:underline"
            >
              <FaGithub /> {cleanUrl(data.socials.github_url)}
            </a>
            <span className="text-gray-400 hidden sm:inline">◆</span>
            <a
              href={data.socials.portfolio_url}
              target="_blank"
              rel="noopener noreferrer"
              className="flex items-center gap-1 text-blue-700 hover:underline"
            >
              <FaGlobe /> {cleanUrl(data.socials.portfolio_url)}
            </a>
          </div>
        </header>

        {/* Summary Section */}
        <section className="mb-4 text-gray-900">
          <h2 className="font-bold uppercase mb-2 pb-1 border-b border-gray-300">
            Summary
          </h2>
          <p className="mt-1 text-xs sm:text-sm">{data.summary}</p>{" "}
        </section>

        {/* Experience Section */}
        <section className="mb-4 text-gray-900">
          <h2 className="font-bold uppercase mb-2 pb-1 border-b border-gray-300">
            Experience
          </h2>
          {data.experience.map((exp, index) => (
            <div key={index} className="mb-2">
              <div className="flex flex-col sm:flex-row sm:justify-between sm:items-baseline">
                <h3 className="text-base sm:text-lg font-bold">
                  {exp.company}
                </h3>
                <span className="text-gray-600 italic text-xs sm:text-sm">
                  {exp.duration.startDate} - {exp.duration.endDate || "Present"}
                </span>
              </div>
              <div className="flex justify-between items-baseline mb-1">
                <p className="italic text-sm">{exp.position}</p>
              </div>
              <ul className="list-disc ml-5 text-xs sm:text-sm">
                {exp.description.map((item, i) => (
                  <li key={i} className="">
                    {item}
                  </li>
                ))}
              </ul>
            </div>
          ))}
        </section>

        {/* Technical Strengths Section */}
        <section className="mb-4 text-gray-900">
          <h2 className="font-bold uppercase mb-2 pb-1 border-b border-gray-300">
            Technical Strengths
          </h2>
          <table className="w-full">
            <tbody>
              {data.skills.map((skill, index) => (
                <tr key={index} className="mb-0.3 text-xs sm:text-sm">
                  <td className="font-bold pr-4 align-top w-1/3 sm:w-[35%]">
                    {skill.skill_title}
                  </td>
                  <td>{skill.skill_items}</td>
                </tr>
              ))}
            </tbody>
          </table>
        </section>

        {/* Education Section */}
        <section className="mb-2 text-gray-900">
          <h2 className="font-bold uppercase mb-2 pb-1 border-b border-gray-300">
            Education
          </h2>
          <div className="flex flex-col sm:flex-row sm:justify-between sm:items-baseline">
            <h3 className="font-bold text-sm">
              {data.education.institution}, {data.education.location}
            </h3>
            <span className="text-gray-600 italic text-xs sm:text-sm">
              {data.education.duration.startDate} -{" "}
              {data.education.duration.endDate || "Present"}
            </span>
          </div>
          <p className="text-xs sm:text-sm">{data.education.degree}</p>
        </section>
      </div>
    </div>
  );
};

export default Resume;

================
File: src/components/ui/Announcement.tsx
================
import React from "react";

type Props = {};

export function Announcement({}: Props) {
  return (
    <div className="flex items-center justify-between rounded bg-secondary-100/80  dark:bg-secondary-900/80 px-4 py-2 text-secondary-foreground dark:text-primary-foreground">
      <span> </span>

      <i className="text-sm font-medium px-8">
        Resume download is currently disabled. Please contact me directly for a
        copy.
      </i>
    </div>
  );
}

================
File: src/components/ui/Badge.tsx
================
import React from "react";
import { ProjectStatus, ProjectType } from "@/types";

type BadgeProps = {
  status: ProjectStatus | ProjectType;
  className?: string;
};

export function Badge({ status, className }: BadgeProps) {
  const getColorClass = () => {
    switch (status) {
      case "In Progress":
        return "bg-yellow-100 text-yellow-800";
      case "Prototype":
        return "bg-blue-100 text-blue-800";
      case "Professional":
        return "bg-green-100 text-green-800";
      case "web":
        return "bg-primary-500 text-primary-foreground";
      case "native":
        return "bg-secondary-700 text-primary-foreground";
      default:
        return "bg-gray-100 text-gray-800";
    }
  };

  return (
    <span
      className={`px-2 py-1 text-xs font-medium rounded-full ${getColorClass()} ${
        className ? className : ""
      }`}
    >
      {status}
    </span>
  );
}

================
File: src/components/ui/Button.tsx
================
import React from "react";
import Link from "next/link";

interface ButtonProps {
  icon?: React.ReactElement;
  label: string;
  onClick?: () => void;
  href?: string;
  disabled?: boolean;
  disabledReason?: string;
  variant?: "primary" | "secondary";
  className?: string;
  noreferrer?: boolean;
}

export const Button: React.FC<ButtonProps> = ({
  icon,
  label,
  onClick,
  href,
  disabled = false,
  disabledReason,
  variant = "primary",
  className,
  noreferrer = false,
}) => {
  const baseClasses = `px-4 py-2 rounded shadow flex items-center justify-center gap-2 text-sm transition-colors`;

  const variantClasses = {
    primary: disabled
      ? "bg-primary text-primary-foreground cursor-not-allowed opacity-50"
      : "bg-primary hover:bg-primary/80 text-primary-foreground",
    secondary: disabled
      ? "bg-secondary-bg text-foreground cursor-not-allowed opacity-50"
      : "bg-secondary-bg hover:bg-primary/80 hover:dark:bg-secondary-bg/80 border-neutral-800 text-foreground",
  };

  const buttonClasses = `${baseClasses} ${variantClasses[variant]} ${className}`;

  if (href && !disabled) {
    return (
      <Link
        href={href}
        className={buttonClasses}
        aria-label={label}
        rel={noreferrer ? "noreferrer noopener" : undefined}
      >
        {icon} {label}
      </Link>
    );
  }

  return (
    <button
      onClick={onClick}
      className={buttonClasses}
      disabled={disabled}
      type="button"
      aria-label={disabledReason || label}
    >
      {icon} {label}
    </button>
  );
};

================
File: src/components/ui/CTAButton.tsx
================
"use client";
import React, { useCallback } from "react";
import Link from "next/link";
import { useSmoothScroll } from "../../utils/hooks/useSmoothScroll";

interface CTAButtonProps {
  href: string;
  children: React.ReactNode;
  className?: string;
  onClick?: () => void;
  type?: "primary" | "secondary";
}

export function CTAButton({
  href,
  children,
  className = "",
  onClick,
  type = "primary",
}: CTAButtonProps) {
  const { scrollToElement } = useSmoothScroll();

  const handleClick = useCallback(
    (e: React.MouseEvent<HTMLAnchorElement>) => {
      e.preventDefault();
      if (onClick) {
        onClick();
      }

      if (href.startsWith("#")) {
        const targetId = href.replace("#", "");
        scrollToElement(targetId);
      } else {
        // For non-hash links, use the default Link behavior
        window.location.href = href;
      }
    },
    [href, onClick, scrollToElement]
  );

  const buttonStyles =
    type === "primary"
      ? `
      bg-primary text-primary-foreground
      after:bg-secondary-700
    `
      : `
      bg-transparent border border-neutral-800 text-neutral-800
      dark:border-neutral-200 dark:text-neutral-200
      after:bg-secondary-700
      transition-colors duration-300
      hover:border-transparent
    `;

  return (
    <Link
      href={href}
      onClick={handleClick}
      className={`
        group font-semibold
        relative flex justify-center items-center rounded-md
        overflow-hidden cursor-pointer
        after:content-["_"] after:absolute after:h-full
        after:w-0 after:right-0
        after:transition-all after:duration-300 after:ease-in-out
        after:z-10
        hover:after:right-auto hover:after:left-0 hover:after:w-full
        ${buttonStyles}
        ${className}
      `}
    >
      <span
        className="
        relative w-full text-center transition-all duration-300 
        hover:text-primary-foreground hover:border-primary-foreground text-md z-20 px-8 py-2 lg:px-16 lg:py-2 lg:text-lg
        "
      >
        {children}
      </span>
    </Link>
  );
}

================
File: src/components/ui/Dropdown.tsx
================
"use client";

import React, { useState, useRef, useEffect } from "react";
import { ChevronDown } from "lucide-react";

interface DropdownProps {
  options: { value: string; label: string; icon: React.ReactNode }[];
  value: string;
  onChange: (value: string) => void;
}

export function Dropdown({ options, value, onChange }: DropdownProps) {
  const [isOpen, setIsOpen] = useState(false);
  const dropdownRef = useRef<HTMLDivElement>(null);

  const handleSelect = (optionValue: string) => {
    onChange(optionValue);
    setIsOpen(false);
  };

  useEffect(() => {
    const handleClickOutside = (event: MouseEvent) => {
      if (
        dropdownRef.current &&
        !dropdownRef.current.contains(event.target as Node)
      ) {
        setIsOpen(false);
      }
    };

    document.addEventListener("mousedown", handleClickOutside);
    return () => {
      document.removeEventListener("mousedown", handleClickOutside);
    };
  }, []);

  const selectedOption = options.find((option) => option.value === value);

  return (
    <div className="relative" ref={dropdownRef}>
      <button
        onClick={() => setIsOpen(!isOpen)}
        className="flex items-center justify-between w-full px-4 py-2 text-sm font-medium text-foreground bg-secondary-bg rounded-md hover:bg-primary/10 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary"
        aria-haspopup="listbox"
        aria-expanded={isOpen}
      >
        <span className="flex items-center">
          {selectedOption?.icon}
          <span className="ml-2">{selectedOption?.label}</span>
        </span>
        <ChevronDown className="w-5 h-5 ml-2" />
      </button>
      {isOpen && (
        <ul
          className="absolute z-10 w-full py-1 mt-1 overflow-auto text-base bg-secondary-bg rounded-md shadow-lg max-h-60 ring-1 ring-black ring-opacity-5 focus:outline-none sm:text-sm"
          role="listbox"
        >
          {options.map((option) => (
            <li
              key={option.value}
              className={`${
                option.value === value
                  ? "text-primary bg-primary/10"
                  : "text-foreground"
              } cursor-default select-none relative py-2 pl-3 pr-9 hover:bg-primary/10`}
              role="option"
              aria-selected={option.value === value}
              onClick={() => handleSelect(option.value)}
            >
              <div className="flex items-center">
                {option.icon}
                <span className="ml-2 block truncate">{option.label}</span>
              </div>
            </li>
          ))}
        </ul>
      )}
    </div>
  );
}

================
File: src/components/ui/index.tsx
================
export { WebTechnology } from "./WebTechnology";
export { Dropdown } from "./Dropdown";
export { Button } from "./Button";
export { LinkButton } from "./LinkButton";
export { CTAButton } from "./CTAButton";
export { Announcement } from "./Announcement";

================
File: src/components/ui/LinkButton.tsx
================
"use client";

import { useCallback } from "react";
import { usePathname } from "next/navigation";
import Link from "next/link";
import { useSmoothScroll } from "../../utils/hooks/useSmoothScroll";

interface LinkButtonProps {
  href: string;
  children: React.ReactNode;
  className?: string;
  target?: string;
  onClick?: () => void;
}

export function LinkButton({
  href,
  children,
  className = "",
  target,
  onClick,
}: LinkButtonProps) {
  const { scrollToElement } = useSmoothScroll();
  const pathname = usePathname();

  const handleClick = useCallback(
    (e: React.MouseEvent<HTMLAnchorElement>) => {
      if (onClick) {
        onClick();
      }

      // check route for home page to activate smooth scroll
      if (href.startsWith("#") && pathname === "/") {
        e.preventDefault();
        const targetId = href.replace("#", "");
        scrollToElement(targetId);
      }
    },
    [href, onClick, scrollToElement, pathname]
  );

  return (
    <Link
      href={href}
      onClick={handleClick}
      target={target}
      className={`
        relative pb-2 tracking-wider text-sm
        after:content-[''] after:absolute after:w-full
        after:scale-x-0 after:h-0.5 after:bottom-0 after:left-0
        after:bg-primary after:origin-right
        after:transition-transform after:duration-300 after:ease-out
        hover:after:scale-x-100 hover:after:origin-left
        ${className}
      `}
    >
      {children}
    </Link>
  );
}

================
File: src/components/ui/WebTechnology.tsx
================
import React from "react";

interface WebTechnologyProps {
  name: string;
  icon: React.ReactNode;
}

export function WebTechnology({ name, icon }: WebTechnologyProps) {
  return (
    <div
      className={`flex items-center space-x-2 p-[0.4rem] lg:p-2 bg-secondary-bg rounded-md text-secondary-700 
        hover:cursor-default hover:text-secondary-900 dark:text-secondary-500 hover:dark:text-secondary-300 
        shadow-sm hover:shadow-md hover:shadow-slate-300 hover:dark:shadow-slate-500 transition-all 
        duration-300`}
    >
      <div className="w-4 h-4 lg:w-6 lg:h-6">{icon}</div>
      <span className="text-xs lg:text-sm font-medium">{name}</span>
    </div>
  );
}

================
File: src/components/seo.tsx
================
import { Metadata } from "next";

interface SEOProps {
  title: string;
  description: string;
  path: string;
}

export function generateMetadata({
  title,
  description,
  path,
}: SEOProps): Metadata {
  const customDomain = "https://benwozak.dev";

  return {
    title,
    description,
    alternates: {
      canonical: `${customDomain}${path}`,
    },
    openGraph: {
      title,
      description,
      url: `${customDomain}${path}`,
    },
  };
}

================
File: src/contexts/ThemeContext.tsx
================
"use client";

import React, { createContext, useContext, useEffect, useState } from "react";

type Theme = "light" | "dark" | "system";

type ThemeContextType = {
  theme: Theme;
  setTheme: (theme: Theme) => void;
};

const ThemeContext = createContext<ThemeContextType | undefined>(undefined);

export function ThemeProvider({ children }: { children: React.ReactNode }) {
  const [theme, setTheme] = useState<Theme>("system");

  useEffect(() => {
    const storedTheme = localStorage.getItem("theme") as Theme | null;
    if (storedTheme) {
      setTheme(storedTheme);
    }
  }, []);

  useEffect(() => {
    localStorage.setItem("theme", theme);
    if (
      theme === "dark" ||
      (theme === "system" &&
        window.matchMedia("(prefers-color-scheme: dark)").matches)
    ) {
      document.documentElement.classList.add("dark");
    } else {
      document.documentElement.classList.remove("dark");
    }
  }, [theme]);

  return (
    <ThemeContext.Provider value={{ theme, setTheme }}>
      {children}
    </ThemeContext.Provider>
  );
}

export function useTheme() {
  const context = useContext(ThemeContext);
  if (context === undefined) {
    throw new Error("useTheme must be used within a ThemeProvider");
  }
  return context;
}

================
File: src/data/projects.json
================
[
  {
    "id": 1,
    "name": "Calgary Folk Fest",
    "type": "web",
    "status": "Professional",
    "description": "A website for a local music festival with well over 40 years of rich history in the heart of downtown Calgary, AB.",
    "media": "https://ua4mmiw8i4jbla3y.public.blob.vercel-storage.com/CFMF-xJzGh6j0tM4nfGWVzi1fsgdAq9In7M.mov",
    "staticImage": "https://ua4mmiw8i4jbla3y.public.blob.vercel-storage.com/CFMF-andRlosHHaG0BXZ6k1oi10W7k0nt8q.png",
    "liveUrl": "https://calgaryfolkfest.com/",
    "githubUrl": null,
    "content": {
      "concept": "Calgary Folk Fest is a local music festival that has been running for over 40 years. They  needed a digital refresh to match its cultural significance. Their outdated website contained extensive content that required re-imagining.",
      "solution": "As part of a small team, we built them a brand new solution from the ground up with Next.js, StrapiCMS and MySQL - hosted on AWS. on top of developing the frontend, I was also largely responsible for architecture and infrastructure."
    }
  },
  {
    "id": 2,
    "name": "Tedana App",
    "type": "native",
    "status": "Prototype",
    "description": "A desktop application for Tedana - a program for multi-echo fMRI processing using Tauri, Rust and React.",
    "media": "https://ua4mmiw8i4jbla3y.public.blob.vercel-storage.com/TedanaApp-71fvLOCahSSxyzvgKNJj7vTKHwGOhw.mov",
    "staticImage": "https://ua4mmiw8i4jbla3y.public.blob.vercel-storage.com/TedanaApp-8Gpg6wj8lu88AwQPAaoKHt88E50IoO.png",
    "liveUrl": null,
    "githubUrl": "https://github.com/benWozak/tedana-gui",
    "content": {
      "concept": "Multi-echo fMRI is a relatively new concept in the world of neuroscience. It is not very well understood and not yet integrated into current data processing pipelines.",
      "solution": "I sought to create a tool to make it easier to use Tedana, and used this as a medium to develop with Tauri, a new framework for building modern desktop applications."
    }
  }
]

================
File: src/data/resume.json
================
{
  "full_name": "Ben Wozak",
  "phone": "(403) 383-8294",
  "email": "benwozak@gmail.com",
  "summary": "Experienced software developer with a strong focus on developing elegant user experiences for complex software solutions. Skilled in modern web technologies and dedicated to producing maintainable, scalable code that delivers exceptional user experiences.",
  "socials": {
    "linkedin_url": "https://www.linkedin.com/in/ben-wozak/",
    "github_url": "https://github.com/benWozak/",
    "portfolio_url": "https://benwozak.dev/"
  },
  "experience": [
    {
      "company": "Cognitive 3D",
      "position": "Frontend Software Engineer",
      "duration": {
        "startDate": "Jan 2025",
        "endDate": null
      },
      "description": [
        "Drastically improved dashboard performance metrics by updating legacy code to use the latest version of React and supporting libraries",
        "Implemented architectural and design implementations for an embedded 3D viewer using Three.js, allowing the company to scale significantly",
        "Mentored junior developers and conducted code reviews to maintain high code quality standards across the team"
      ]
    },
    {
      "company": "Flipp Advertising",
      "position": "Senior Web Developer",
      "duration": {
        "startDate": "Nov 2023",
        "endDate": "July 2024"
      },
      "description": [
        "Led the development of a high-traffic commercial website using Next.js and TypeScript, supporting over 50,000 peak users each year",
        "Collaborating with UX designers to Build and maintained client websites using HTML, CSS, JavaScript, and WordPress",
        "Optimized website performance and SEO, significantly improving load times and search rankings"
      ]
    },
    {
      "company": "Chata.ai",
      "position": "Team Lead/Frontend Software Engineer",
      "duration": {
        "startDate": "Sept 2019",
        "endDate": "Nov 2023"
      },
      "description": [
        "Led two 4-person teams: one developing an internal tool for language model configuration, another creating AutoQL suite with chat interface, dashboard, and notification system",
        "Developed 2 API management portals and Microsoft Teams extension, serving hundreds of users across multiple SaaS platforms",
        "Spearheaded company-wide TypeScript adoption and group code-reviews through dev guild leadership."
      ]
    },
    {
      "company": "KRD Consulting",
      "position": "Junior Web Developer",
      "duration": {
        "startDate": "April 2019",
        "endDate": "Nov 2019"
      },
      "description": [
        "Modernized a database management system, integrating custom reporting and form creation tools.",
        "Created network visualization tool for enhancing non-profit collaboration.",
        "Managed and optimized custom DrupalCMS client site."
      ]
    }
  ],
  "skills": [
    {
      "skill_title": "Languages",
      "skill_items": "TypeScript/JavaScript, HTML/CSS, Python, PHP"
    },
    {
      "skill_title": "Frameworks & Libraries",
      "skill_items": "React, NextJS, express/node.js, SASS/tailwind, Vue.js, Laravel, framer-motion"
    },
    {
      "skill_title": "Databases",
      "skill_items": "MySql, Sqlite, Postgres"
    },
    {
      "skill_title": "Tools & Platforms",
      "skill_items": "Git, GitHub, VS Code, Docker, AWS, Vercel, Netlify"
    },
    {
      "skill_title": "Other Skills",
      "skill_items": "Responsive Design, UI/UX, RESTful APIs, GraphQL, LaTeX"
    }
  ],
  "education": {
    "institution": "Southern Alberta Institute of Technology",
    "location": "Calgary AB",
    "duration": {
      "startDate": "Sep 2017",
      "endDate": "May 2019"
    },
    "degree": "Diploma, Information Technologies: Software Development"
  }
}

================
File: src/lib/motion.ts
================
export function slideInFromLeft(delay: number) {
  return {
    hidden: { x: -100, opacity: 0 },
    visible: {
      x: 0,
      opacity: 1,
      transition: {
        delay: delay,
        duration: 0.5,
      },
    },
  };
}

export function slideInFromRight(delay: number) {
  return {
    hidden: { x: 100, opacity: 0 },
    visible: {
      x: 0,
      opacity: 1,
      transition: {
        delay: delay,
        duration: 0.5,
      },
    },
  };
}

export const slideInFromTop = {
  hidden: { y: -100, opacity: 0 },
  visible: {
    y: 0,
    opacity: 1,
    transition: {
      delay: 0.5,
      duration: 0.5,
    },
  },
};

================
File: src/styles/normalization.css
================
/* Use a more-intuitive box-sizing model */
*,
*::before,
*::after {
  box-sizing: border-box;
}

/* Remove default margin */
* {
  margin: 0;
}

/* Allow percentage-based heights in the application */
html,
body {
  height: 100%;
}

/* Typographic tweaks */
body {
  line-height: 1.5;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

/* Improve media defaults */
img,
picture,
video,
canvas,
svg {
  display: block;
  max-width: 100%;
}

/* Remove built-in form typography styles */
input,
button,
textarea,
select {
  font: inherit;
}

/* Avoid text overflows */
p,
h1,
h2,
h3,
h4,
h5,
h6 {
  overflow-wrap: break-word;
}

/* Create a root stacking context */
#root,
#__next {
  isolation: isolate;
}

/* Remove list styles on ul, ol elements with a list role, which suggests default styling will be removed */
ul[role="list"],
ol[role="list"] {
  list-style: none;
}

/* Set core root defaults */
html:focus-within {
  scroll-behavior: smooth;
}

/* A elements that don't have a class get default styles */
a:not([class]) {
  text-decoration-skip-ink: auto;
}

/* Make images easier to work with */
img,
picture {
  max-width: 100%;
  display: block;
}

/* Inherit fonts for inputs and buttons */
input,
button,
textarea,
select {
  font: inherit;
}

/* Remove all animations, transitions and smooth scroll for people that prefer not to see them */
@media (prefers-reduced-motion: reduce) {
  html:focus-within {
    scroll-behavior: auto;
  }

  *,
  *::before,
  *::after {
    animation-duration: 0.01ms !important;
    animation-iteration-count: 1 !important;
    transition-duration: 0.01ms !important;
    scroll-behavior: auto !important;
  }
}

================
File: src/types/index.ts
================
export type ProjectStatus = 'In Progress' | 'Prototype' | 'Professional';
export type ProjectType = 'web' | 'native';

export interface Project {
  id: number;
  name: string;
  type: ProjectType;
  status: ProjectStatus;
  description: string;
  media: string;
  staticImage: string;
  liveUrl: string | null;
  githubUrl: string;
  content: {
    concept: string;
    solution: string;
  };
}

================
File: src/types/resume.ts
================
export interface SocialsData {
  linkedin_url: string;
  github_url: string;
  portfolio_url: string;
}

export interface ExperienceItem {
  company: string;
  position: string;
  duration: {
    startDate: string;
    endDate: string | null;
  };
  description: string[];
}

export interface SkillItem {
  skill_title: string;
  skill_items: string;
}

export interface EducationData {
  institution: string;
  location: string;
  duration: {
    startDate: string;
    endDate: string | null;
  };
  degree: string;
}

export interface ResumeData {
  full_name: string;
  email: string;
  phone: string;
  socials: SocialsData;
  summary: string;
  experience: ExperienceItem[];
  skills: SkillItem[];
  education: EducationData;
}

================
File: src/utils/functions/animations.ts
================
/**
 * Function to calculate waterfall delay based on item position in grid
 * This creates a cascading effect for animations
 * that flows from top-left to bottom-right.
 * 
 * @param index 
 * @returns 
 */
export function calculateWaterfallDelay(index: number): number {
  let columnsCount = 1;
  if (typeof window !== "undefined") {
    if (window.innerWidth >= 1024) columnsCount = 3; // lg breakpoint
    else if (window.innerWidth >= 768) columnsCount = 2; // md breakpoint
  }

  const row = Math.floor(index / columnsCount);
  const col = index % columnsCount;

  const baseDelay = 0.4;
  const rowDelay = row * 0.25;
  const colDelay = col * 0.12;

  return baseDelay + rowDelay + colDelay;
}

================
File: src/utils/functions/format.ts
================
// utils/functions/format.ts

/**
 * Escapes special LaTeX characters in a string
 * @param str String to escape
 * @returns Escaped string safe for LaTeX
 */
export function escapeLatex(str: string): string {
  if (!str) return '';
  
  // Replace special LaTeX characters with their escaped versions
  return str
    .replace(/\\/g, '\\textbackslash{}')
    .replace(/\{/g, '\\{')
    .replace(/\}/g, '\\}')
    .replace(/\$/g, '\\$')
    .replace(/&/g, '\\&')
    .replace(/#/g, '\\#')
    .replace(/\^/g, '\\^{}')
    .replace(/_/g, '\\_')
    .replace(/~/g, '\\~{}')
    .replace(/%/g, '\\%');
}

/**
 * Formats a phone number to (xxx) xxx-xxxx format
 * @param phoneNumber Input phone number string
 * @returns Formatted phone number
 */
export function formatPhoneNumber(phoneNumber: string): string {
  if (!phoneNumber) return '';
  
  // Remove all non-digit characters
  const cleaned = phoneNumber.replace(/\D/g, '');
  
  // Format as (xxx) xxx-xxxx if it has 10 digits
  const match = cleaned.match(/^(\d{3})(\d{3})(\d{4})$/);
  
  if (match) {
    return `(${match[1]}) ${match[2]}-${match[3]}`;
  }
  
  // Return original if not a standard 10-digit US phone number
  return phoneNumber;
}

/**
 * Escapes special characters in URLs for LaTeX
 * @param url URL string to escape
 * @returns Escaped URL safe for LaTeX
 */
export function escapeUrl(url: string): string {
  if (!url) return '';
  
  // URLs in LaTeX need special character handling
  return url
    .replace(/%/g, '\\%')
    .replace(/#/g, '\\#');
}

/**
 * Formats a date string to "Mon YYYY" format
 * @param dateString Date string in ISO or any parseable format
 * @returns Formatted date string or "Present" if null/undefined
 */
export function formatDate(dateString: string | null | undefined): string {
  if (!dateString) return 'Present';
  
  try {
    const date = new Date(dateString);
    
    // Check if date is valid
    if (isNaN(date.getTime())) {
      return dateString;
    }
    
    // Format to "Mon YYYY" (e.g., "Jan 2023")
    const month = date.toLocaleString('default', { month: 'short' });
    const year = date.getFullYear();
    
    return `${month} ${year}`;
  } catch (error) {
    console.error('Error formatting date:', error);
    return dateString;
  }
}

/**
 * Converts a string to snake_case format
 * @param input Input string to format
 * @returns String in snake_case format
 */
export function formatSnakeCase(input: string): string {
  if (!input) return '';
  
  return input
    .toLowerCase()
    .replace(/[^\w\s-]/g, '') // Remove all non-word chars except spaces and hyphens
    .replace(/[\s-]+/g, '_'); // Replace spaces and hyphens with single underscore
}

/**
 * Cleans a URL by removing 'https://', 'www.' and trailing '/'
 * @param url - The URL to clean
 * @returns The cleaned URL string
 */
export function cleanUrl(url: string): string {
  if (!url) return '';
  
  // Using regex to remove https://, www. and trailing slash
  return url.replace(/^(https?:\/\/)?(www\.)?/, '').replace(/\/$/, '');
}

================
File: src/utils/hooks/index.ts
================
export { useNavigation } from "./useNavigation";
export { useSmoothScroll } from "./useSmoothScroll";

================
File: src/utils/hooks/useNavigation.ts
================
import { usePathname } from "next/navigation";

export interface NavItem {
  href: string;
  label: string;
}

/**
 * Hook that returns navigation items with proper URLs based on current path
 * @returns Array of navigation items with path-aware URLs
 */
export function useNavigation(): NavItem[] {
  const pathname = usePathname();
  const isHomePage = pathname === "/";

  const navItems: NavItem[] = [
    {
      href: isHomePage ? "#about" : "/#about",
      label: "About",
    },
    {
      href: isHomePage ? "#services" : "/#services",
      label: "Services",
    },
    {
      href: isHomePage ? "#experience" : "/#experience",
      label: "Experience",
    },
    {
      href: "/projects",
      label: "Projects",
    },
    {
      href: "/contact",
      label: "Contact",
    },
  ];

  return navItems;
}

================
File: src/utils/hooks/useSmoothScroll.ts
================
import { useCallback } from "react";

export const useSmoothScroll = () => {
  const scrollToElement = useCallback((elementId: string) => {
    const element = document.getElementById(elementId);
    if (element) {
      element.scrollIntoView({
        behavior: "smooth",
        block: "start",
      });
    }
  }, []);

  const scrollToTop = useCallback(() => {
    window.scrollTo({
      top: 0,
      behavior: 'smooth'
    });
  }, []);

  return { scrollToElement, scrollToTop };
};

================
File: src/utils/getProjects.ts
================
import { Project } from '@/types';
import rawProjectsData from '@/data/projects.json';

// Type assertion for imported JSON
const projectsData = rawProjectsData as Project[];

export async function getProjects(): Promise<Project[]> {
  if (typeof window === 'undefined') {
    return projectsData;
  }

  try {
    const res = await fetch(`${process.env.NEXT_PUBLIC_API_URL}/api/projects`);
    if (!res.ok) {
      throw new Error('Failed to fetch projects');
    }
    const data = await res.json();
    return data as Project[];
  } catch (error) {
    console.error('Projects fetch error:', error);
    return projectsData;
  }
}

export async function getProjectByName(name: string): Promise<Project | undefined> {
  const projects = await getProjects();
  return projects.find((project) => project.name.toLowerCase() === name.toLowerCase());
}

================
File: .eslintrc.json
================
{
  "extends": ["next/core-web-vitals", "next/typescript"],
  "rules": {
    "@typescript-eslint/no-explicit-any": "off"
  },
}

================
File: .gitignore
================
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.*
.yarn/*
!.yarn/patches
!.yarn/plugins
!.yarn/releases
!.yarn/versions

# testing
/coverage

# next.js
/.next/
/out/

# production
/build

# misc
.DS_Store
*.pem

# debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# env files (can opt-in for committing if needed)
.env*

# vercel
.vercel

# typescript
*.tsbuildinfo
next-env.d.ts

================
File: module.d.ts
================
declare module 'html2pdf.js'

================
File: next.config.ts
================
import type { NextConfig } from "next";

const nextConfig: NextConfig = {
  images: {
    domains: ['ua4mmiw8i4jbla3y.public.blob.vercel-storage.com'],
  },
  async redirects() {
    return [
      {
        source: '/:path*',
        has: [
          {
            type: 'host',
            value: 'https://v2-benwozak.vercel.app/',
          },
        ],
        destination: 'https://www.benwozak.dev/:path*',
        permanent: true,
      },
    ]
  },
};

export default nextConfig;

================
File: package.json
================
{
  "name": "portfolio-v2",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev --turbopack",
    "build": "next build",
    "start": "next start",
    "lint": "next lint"
  },
  "dependencies": {
    "@emailjs/browser": "^4.4.1",
    "@emailjs/nodejs": "^5.0.2",
    "@vercel/analytics": "^1.5.0",
    "framer-motion": "^11.12.0",
    "html2pdf.js": "^0.10.3",
    "lucide-react": "^0.462.0",
    "next": "^15.2.3",
    "next-themes": "^0.4.3",
    "node-latex": "^3.1.0",
    "react": "^19.0.0",
    "react-dom": "^19.0.0",
    "react-hot-toast": "^2.5.2",
    "react-icons": "^5.3.0",
    "react-pdf": "^9.2.1",
    "zod": "^3.23.8"
  },
  "devDependencies": {
    "@types/node": "^20",
    "@types/nodemailer": "^6.4.17",
    "@types/react": "^18",
    "@types/react-dom": "^18",
    "eslint": "^8",
    "eslint-config-next": "15.0.3",
    "postcss": "^8",
    "tailwindcss": "^3.4.1",
    "typescript": "^5"
  }
}

================
File: postcss.config.mjs
================
/** @type {import('postcss-load-config').Config} */
const config = {
  plugins: {
    tailwindcss: {},
  },
};

export default config;

================
File: README.md
================
This is a [Next.js](https://nextjs.org) project bootstrapped with [`create-next-app`](https://nextjs.org/docs/app/api-reference/cli/create-next-app).

## Getting Started

First, run the development server:

```bash
npm run dev
# or
yarn dev
# or
pnpm dev
# or
bun dev
```

Open [http://localhost:3000](http://localhost:3000) with your browser to see the result.

You can start editing the page by modifying `app/page.tsx`. The page auto-updates as you edit the file.

This project uses [`next/font`](https://nextjs.org/docs/app/building-your-application/optimizing/fonts) to automatically optimize and load [Geist](https://vercel.com/font), a new font family for Vercel.

## Learn More

To learn more about Next.js, take a look at the following resources:

- [Next.js Documentation](https://nextjs.org/docs) - learn about Next.js features and API.
- [Learn Next.js](https://nextjs.org/learn) - an interactive Next.js tutorial.

You can check out [the Next.js GitHub repository](https://github.com/vercel/next.js) - your feedback and contributions are welcome!

## Deploy on Vercel

The easiest way to deploy your Next.js app is to use the [Vercel Platform](https://vercel.com/new?utm_medium=default-template&filter=next.js&utm_source=create-next-app&utm_campaign=create-next-app-readme) from the creators of Next.js.

Check out our [Next.js deployment documentation](https://nextjs.org/docs/app/building-your-application/deploying) for more details.

================
File: tailwind.config.ts
================
import type { Config } from "tailwindcss";

const config: Config = {
  content: [
    "./src/pages/**/*.{js,ts,jsx,tsx,mdx}",
    "./src/components/**/*.{js,ts,jsx,tsx,mdx}",
    "./src/app/**/*.{js,ts,jsx,tsx,mdx}",
  ],
  darkMode: "class",
  theme: {
    extend: {
      fontFamily: {
        sans: ["var(--font-geist-sans)", "system-ui", "sans-serif"],
        mono: ["var(--font-geist-mono)", "monospace"],
      },
      colors: {
        background: "hsl(var(--background))",
        foreground: "hsl(var(--foreground))",
        "secondary-bg": "hsl(var(--secondary-bg))",
        primary: {
          DEFAULT: "hsl(var(--primary))",
          foreground: "hsl(var(--primary-foreground))",
          50: "hsl(var(--primary-50))",
          100: "hsl(var(--primary-100))",
          200: "hsl(var(--primary-200))",
          300: "hsl(var(--primary-300))",
          400: "hsl(var(--primary-400))",
          500: "hsl(var(--primary-500))",
          600: "hsl(var(--primary-600))",
          700: "hsl(var(--primary-700))",
          800: "hsl(var(--primary-800))",
          900: "hsl(var(--primary-900))",
          950: "hsl(var(--primary-950))",
        },
        secondary: {
          DEFAULT: "hsl(var(--secondary))",
          foreground: "hsl(var(--secondary-foreground))",
          50: "hsl(var(--secondary-50))",
          100: "hsl(var(--secondary-100))",
          200: "hsl(var(--secondary-200))",
          300: "hsl(var(--secondary-300))",
          400: "hsl(var(--secondary-400))",
          500: "hsl(var(--secondary-500))",
          600: "hsl(var(--secondary-600))",
          700: "hsl(var(--secondary-700))",
          800: "hsl(var(--secondary-800))",
          900: "hsl(var(--secondary-900))",
          950: "hsl(var(--secondary-950))",
        },
        accent: {
          DEFAULT: "hsl(var(--accent))",
          foreground: "hsl(var(--accent-foreground))",
        },
      },
    },
  },
  plugins: [],
};

export default config;

================
File: tsconfig.json
================
{
  "compilerOptions": {
    "target": "ES2017",
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "bundler",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "plugins": [
      {
        "name": "next"
      }
    ],
    "paths": {
      "@/*": ["./src/*"]
    }
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts", "scripts/build-resume.js"],
  "exclude": ["node_modules"]
}
