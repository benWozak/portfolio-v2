This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repomix on: 2024-12-01T21:12:46.355Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Repository structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

For more information about Repomix, visit: https://github.com/yamadashy/repomix

================================================================
Repository Structure
================================================================
public/
  BW_logo_light.svg
  BW_logo.svg
  next.svg
  vercel.svg
src/
  app/
    components/
      content/
        index.tsx
        TechnologyShowcase.tsx
      layout/
        AnimatedHome.tsx
        Header.tsx
        Hero.tsx
        index.tsx
        InitialAnimation.tsx
        ThemeToggle.tsx
      ui/
        Dropdown.tsx
        index.tsx
        LinkButton.tsx
        WebTechnology.tsx
    contexts/
      ThemeContext.tsx
    globals.css
    layout.tsx
    page.tsx
.eslintrc.json
.gitignore
next.config.ts
package.json
postcss.config.mjs
README.md
tailwind.config.ts
tsconfig.json

================================================================
Repository Files
================================================================

================
File: public/BW_logo_light.svg
================
<?xml version="1.0" encoding="utf-8"?>
<!-- Generator: Adobe Illustrator 27.8.0, SVG Export Plug-In . SVG Version: 6.00 Build 0)  -->
<svg version="1.1" id="a" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px"
	 viewBox="0 0 93.9 108" style="enable-background:new 0 0 93.9 108;" xml:space="preserve">
<style type="text/css">
	.st0{fill:#FFFFFF;}
	.st1{font-family:'AmericanTypewriter';}
	.st2{font-size:32px;}
	.st3{enable-background:new    ;}
	.st4{fill:#E55F3B;}
	.st5{font-size:55px;}
</style>
<text transform="matrix(1 0 0 1 22.17 67.67)" class="st0 st1 st2">B</text>
<text transform="matrix(1 0 0 1 31.14 82.01)" class="st0 st1 st2">W</text>
<g>
	<g class="st3">
		<path class="st0" d="M4.1,55l21.6-24.8V36L7,57.2l18.8,22.1V85L4.1,59.6V55z"/>
	</g>
</g>
<text transform="matrix(1 0 0 1 56.8006 86.4263)" class="st4 st1 st5">/</text>
<g>
	<g class="st3">
		<path class="st0" d="M89.8,59.6L68.2,85v-5.8L87,57.1L68.2,36v-5.9L89.8,55V59.6z"/>
	</g>
</g>
</svg>

================
File: public/BW_logo.svg
================
<?xml version="1.0" encoding="utf-8"?>
<!-- Generator: Adobe Illustrator 27.8.0, SVG Export Plug-In . SVG Version: 6.00 Build 0)  -->
<svg version="1.1" id="a" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px"
	 viewBox="0 0 93.9 108" style="enable-background:new 0 0 93.9 108;" xml:space="preserve">
<style type="text/css">
	.st0{fill:#231F20;}
	.st1{font-family:'AmericanTypewriter';}
	.st2{font-size:32px;}
	.st3{enable-background:new    ;}
	.st4{fill:#E55F3B;}
	.st5{font-size:55px;}
</style>
<text transform="matrix(1 0 0 1 22.17 67.67)" class="st0 st1 st2">B</text>
<text transform="matrix(1 0 0 1 31.14 82.01)" class="st0 st1 st2">W</text>
<g>
	<g class="st3">
		<path class="st0" d="M4.1,55l21.6-24.8V36L7,57.2l18.8,22.1V85L4.1,59.6V55z"/>
	</g>
</g>
<text transform="matrix(1 0 0 1 52.8006 82.4263)" class="st4 st1 st5">/</text>
<g>
	<g class="st3">
		<path class="st0" d="M89.8,59.6L68.2,85v-5.8l18.8-22.1L68.2,36v-5.9L89.8,55V59.6z"/>
	</g>
</g>
</svg>

================
File: public/next.svg
================
<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 394 80"><path fill="#000" d="M262 0h68.5v12.7h-27.2v66.6h-13.6V12.7H262V0ZM149 0v12.7H94v20.4h44.3v12.6H94v21h55v12.6H80.5V0h68.7zm34.3 0h-17.8l63.8 79.4h17.9l-32-39.7 32-39.6h-17.9l-23 28.6-23-28.6zm18.3 56.7-9-11-27.1 33.7h17.8l18.3-22.7z"/><path fill="#000" d="M81 79.3 17 0H0v79.3h13.6V17l50.2 62.3H81Zm252.6-.4c-1 0-1.8-.4-2.5-1s-1.1-1.6-1.1-2.6.3-1.8 1-2.5 1.6-1 2.6-1 1.8.3 2.5 1a3.4 3.4 0 0 1 .6 4.3 3.7 3.7 0 0 1-3 1.8zm23.2-33.5h6v23.3c0 2.1-.4 4-1.3 5.5a9.1 9.1 0 0 1-3.8 3.5c-1.6.8-3.5 1.3-5.7 1.3-2 0-3.7-.4-5.3-1s-2.8-1.8-3.7-3.2c-.9-1.3-1.4-3-1.4-5h6c.1.8.3 1.6.7 2.2s1 1.2 1.6 1.5c.7.4 1.5.5 2.4.5 1 0 1.8-.2 2.4-.6a4 4 0 0 0 1.6-1.8c.3-.8.5-1.8.5-3V45.5zm30.9 9.1a4.4 4.4 0 0 0-2-3.3 7.5 7.5 0 0 0-4.3-1.1c-1.3 0-2.4.2-3.3.5-.9.4-1.6 1-2 1.6a3.5 3.5 0 0 0-.3 4c.3.5.7.9 1.3 1.2l1.8 1 2 .5 3.2.8c1.3.3 2.5.7 3.7 1.2a13 13 0 0 1 3.2 1.8 8.1 8.1 0 0 1 3 6.5c0 2-.5 3.7-1.5 5.1a10 10 0 0 1-4.4 3.5c-1.8.8-4.1 1.2-6.8 1.2-2.6 0-4.9-.4-6.8-1.2-2-.8-3.4-2-4.5-3.5a10 10 0 0 1-1.7-5.6h6a5 5 0 0 0 3.5 4.6c1 .4 2.2.6 3.4.6 1.3 0 2.5-.2 3.5-.6 1-.4 1.8-1 2.4-1.7a4 4 0 0 0 .8-2.4c0-.9-.2-1.6-.7-2.2a11 11 0 0 0-2.1-1.4l-3.2-1-3.8-1c-2.8-.7-5-1.7-6.6-3.2a7.2 7.2 0 0 1-2.4-5.7 8 8 0 0 1 1.7-5 10 10 0 0 1 4.3-3.5c2-.8 4-1.2 6.4-1.2 2.3 0 4.4.4 6.2 1.2 1.8.8 3.2 2 4.3 3.4 1 1.4 1.5 3 1.5 5h-5.8z"/></svg>

================
File: public/vercel.svg
================
<svg fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1155 1000"><path d="m577.3 0 577.4 1000H0z" fill="#fff"/></svg>

================
File: src/app/components/content/index.tsx
================
export { TechnologyShowcase } from "./TechnologyShowcase";

================
File: src/app/components/content/TechnologyShowcase.tsx
================
import { WebTechnology } from "../ui/WebTechnology";
import {
  SiNextdotjs,
  SiReact,
  SiTypescript,
  SiTailwindcss,
  SiPayloadcms,
  SiNodedotjs,
  SiPython,
} from "react-icons/si";

export function TechnologyShowcase() {
  const technologies = [
    { name: "Next.js", icon: <SiNextdotjs className="w-6 h-6" /> },
    { name: "React", icon: <SiReact className="w-6 h-6" /> },
    { name: "TypeScript", icon: <SiTypescript className="w-6 h-6" /> },
    { name: "Tailwind CSS", icon: <SiTailwindcss className="w-6 h-6" /> },
    { name: "Payload CMS", icon: <SiPayloadcms className="w-6 h-6" /> },
    { name: "Node.js", icon: <SiNodedotjs className="w-6 h-6" /> },
    { name: "Python", icon: <SiPython className="w-6 h-6" /> },
  ];

  return (
    <div className="flex flex-wrap gap-4 justify-center">
      {technologies.map((tech) => (
        <WebTechnology key={tech.name} name={tech.name} icon={tech.icon} />
      ))}
    </div>
  );
}

================
File: src/app/components/layout/AnimatedHome.tsx
================
"use client";

import { useState } from "react";
import InitialAnimation from "./InitialAnimation";

export default function AnimatedHome({
  children,
}: {
  children: React.ReactNode;
}) {
  const [showHomePage, setShowHomePage] = useState(false);

  const handleAnimationComplete = () => {
    setShowHomePage(true);
  };

  if (!showHomePage) {
    return <InitialAnimation onComplete={handleAnimationComplete} />;
  }

  return <>{children}</>;
}

================
File: src/app/components/layout/Header.tsx
================
import React from "react";
import { ThemeToggle } from "./ThemeToggle";

type Props = {};

export function Header({}: Props) {
  return (
    <header className="">
      <div className="mx-auto max-w-screen-xl px-4 sm:px-6 lg:px-8">
        <div className="flex h-16 items-center justify-between">
          <div className="flex-1 md:flex md:items-center md:gap-12">
            <a className="block text-teal-600" href="#">
              <span className="sr-only">Home</span>
              <svg
                className="h-8"
                viewBox="0 0 28 24"
                fill="none"
                xmlns="http://www.w3.org/2000/svg"
              >
                <path
                  d="M0.41 10.3847C1.14777 7.4194 2.85643 4.7861 5.2639 2.90424C7.6714 1.02234 10.6393 0 13.695 0C16.7507 0 19.7186 1.02234 22.1261 2.90424C24.5336 4.7861 26.2422 7.4194 26.98 10.3847H25.78C23.7557 10.3549 21.7729 10.9599 20.11 12.1147C20.014 12.1842 19.9138 12.2477 19.81 12.3047H19.67C19.5662 12.2477 19.466 12.1842 19.37 12.1147C17.6924 10.9866 15.7166 10.3841 13.695 10.3841C11.6734 10.3841 9.6976 10.9866 8.02 12.1147C7.924 12.1842 7.8238 12.2477 7.72 12.3047H7.58C7.4762 12.2477 7.376 12.1842 7.28 12.1147C5.6171 10.9599 3.6343 10.3549 1.61 10.3847H0.41ZM23.62 16.6547C24.236 16.175 24.9995 15.924 25.78 15.9447H27.39V12.7347H25.78C24.4052 12.7181 23.0619 13.146 21.95 13.9547C21.3243 14.416 20.5674 14.6649 19.79 14.6649C19.0126 14.6649 18.2557 14.416 17.63 13.9547C16.4899 13.1611 15.1341 12.7356 13.745 12.7356C12.3559 12.7356 11.0001 13.1611 9.86 13.9547C9.2343 14.416 8.4774 14.6649 7.7 14.6649C6.9226 14.6649 6.1657 14.416 5.54 13.9547C4.4144 13.1356 3.0518 12.7072 1.66 12.7347H0V15.9447H1.61C2.39051 15.924 3.154 16.175 3.77 16.6547C4.908 17.4489 6.2623 17.8747 7.65 17.8747C9.0377 17.8747 10.392 17.4489 11.53 16.6547C12.1468 16.1765 12.9097 15.9257 13.69 15.9447C14.4708 15.9223 15.2348 16.1735 15.85 16.6547C16.9901 17.4484 18.3459 17.8738 19.735 17.8738C21.1241 17.8738 22.4799 17.4484 23.62 16.6547ZM23.62 22.3947C24.236 21.915 24.9995 21.664 25.78 21.6847H27.39V18.4747H25.78C24.4052 18.4581 23.0619 18.886 21.95 19.6947C21.3243 20.156 20.5674 20.4049 19.79 20.4049C19.0126 20.4049 18.2557 20.156 17.63 19.6947C16.4899 18.9011 15.1341 18.4757 13.745 18.4757C12.3559 18.4757 11.0001 18.9011 9.86 19.6947C9.2343 20.156 8.4774 20.4049 7.7 20.4049C6.9226 20.4049 6.1657 20.156 5.54 19.6947C4.4144 18.8757 3.0518 18.4472 1.66 18.4747H0V21.6847H1.61C2.39051 21.664 3.154 21.915 3.77 22.3947C4.908 23.1889 6.2623 23.6147 7.65 23.6147C9.0377 23.6147 10.392 23.1889 11.53 22.3947C12.1468 21.9165 12.9097 21.6657 13.69 21.6847C14.4708 21.6623 15.2348 21.9135 15.85 22.3947C16.9901 23.1884 18.3459 23.6138 19.735 23.6138C21.1241 23.6138 22.4799 23.1884 23.62 22.3947Z"
                  fill="currentColor"
                />
              </svg>
            </a>
          </div>

          <div className="md:flex md:items-center md:gap-12">
            <nav aria-label="Global" className="hidden md:block">
              <ul className="flex items-center gap-6 text-sm">
                <li>
                  <a
                    className="text-gray-500 transition hover:text-gray-500/75"
                    href="#"
                  >
                    {" "}
                    About{" "}
                  </a>
                </li>

                <li>
                  <a
                    className="text-gray-500 transition hover:text-gray-500/75"
                    href="#"
                  >
                    {" "}
                    Careers{" "}
                  </a>
                </li>

                <li>
                  <a
                    className="text-gray-500 transition hover:text-gray-500/75"
                    href="#"
                  >
                    {" "}
                    History{" "}
                  </a>
                </li>

                <li>
                  <a
                    className="text-gray-500 transition hover:text-gray-500/75"
                    href="#"
                  >
                    {" "}
                    Services{" "}
                  </a>
                </li>

                <li>
                  <a
                    className="text-gray-500 transition hover:text-gray-500/75"
                    href="#"
                  >
                    {" "}
                    Projects{" "}
                  </a>
                </li>

                <li>
                  <a
                    className="text-gray-500 transition hover:text-gray-500/75"
                    href="#"
                  >
                    {" "}
                    Blog{" "}
                  </a>
                </li>
              </ul>
            </nav>

            <div className="flex items-center gap-4">
              <div className="sm:flex sm:gap-4">
                <ThemeToggle />
              </div>

              <div className="block md:hidden">
                <button className="rounded bg-gray-100 p-2 text-gray-600 transition hover:text-gray-600/75">
                  <svg
                    xmlns="http://www.w3.org/2000/svg"
                    className="size-5"
                    fill="none"
                    viewBox="0 0 24 24"
                    stroke="currentColor"
                    strokeWidth="2"
                  >
                    <path
                      strokeLinecap="round"
                      strokeLinejoin="round"
                      d="M4 6h16M4 12h16M4 18h16"
                    />
                  </svg>
                </button>
              </div>
            </div>
          </div>
        </div>
      </div>
    </header>
  );
}

================
File: src/app/components/layout/Hero.tsx
================
import { TechnologyShowcase } from "../content";

export function Hero() {
  return (
    <section className="relative h-auto  w-full flex flex-col  items-center pt-10 lg:pt-32 mb-32">
      <div className="absolute h-[20%] w-[20%] top-[20%] left-[50%] -translate-x-1/2 bg-primary rounded-full blur-[110px]"></div>
      <h1 className="w-full text-3xl md:text-4xl lg:text-6xl max-w-3xl  font-bold  text-center">
        Transforming Ideas
      </h1>
      <h1 className="w-full text-2xl md:text-3xl lg:text-3xl max-w-3xl  font-bold  text-center mt-3">
        Into <span className="text-primary">Polished</span> Web Experiences
      </h1>
      <p className="text-center lg:text-xl text-foreground mt-10 max-w-xl">
        Combining clean design with powerful functionality to help you stand out
        online.
      </p>
      <button className="py-3 px-5 rounded-md bg-primary text-black mt-16 hover:bg-sky-600 transition">
        Book a Meeting
      </button>
      <div className="flex items-center justify-center gap-5 uppercase  text-sm lg:text-xl font-semibold mt-10">
        <div className="w-6 lg:w-12 h-0.5 lg:h-1 rounded-full bg-primary"></div>
        Technology
        <div className="w-6 lg:w-12 h-0.5 lg:h-1.5 rounded-full bg-primary"></div>
      </div>
      <div className=" flex flex-wrap gap-5 md:flex md:flex-row items-center justify-center  lg:gap-10 lg:h-24 h-auto w-[80%] lg:mx-auto mx-2 my-2 lg:my-4 rounded-3xl">
        <TechnologyShowcase />
      </div>
    </section>
  );
}

================
File: src/app/components/layout/index.tsx
================
export { Hero } from "./Hero";
export { ThemeToggle } from "./ThemeToggle";
export { Header } from "./Header";

================
File: src/app/components/layout/InitialAnimation.tsx
================
"use client";

import { useState, useEffect } from "react";
import { motion } from "framer-motion";

const words = ["Your Vision", "//", "Expertly Developed"];

export default function InitialAnimation({
  onComplete,
}: {
  onComplete: () => void;
}) {
  const [currentWordIndex, setCurrentWordIndex] = useState(0);
  const [isAnimationComplete, setIsAnimationComplete] = useState(false);

  useEffect(() => {
    if (currentWordIndex < words.length) {
      const timer = setTimeout(() => {
        setCurrentWordIndex(currentWordIndex + 1);
      }, 1000); // Adjust this value to control the delay between words
      return () => clearTimeout(timer);
    } else if (!isAnimationComplete) {
      const timer = setTimeout(() => {
        setIsAnimationComplete(true);
        onComplete();
      }, 1000); // Delay before transitioning to the home page
      return () => clearTimeout(timer);
    }
  }, [currentWordIndex, isAnimationComplete, onComplete]);

  return (
    <div className="fixed inset-0 flex items-center justify-center bg-black text-white">
      <div className="text-4xl md:text-6xl font-bold">
        {words.map((word, index) => (
          <motion.span
            key={word}
            className="inline-block mr-4"
            initial={{ opacity: 0 }}
            animate={{ opacity: index <= currentWordIndex ? 1 : 0 }}
            transition={{ duration: 0.5 }}
          >
            {word}
          </motion.span>
        ))}
      </div>
    </div>
  );
}

================
File: src/app/components/layout/ThemeToggle.tsx
================
"use client";

import { useTheme } from "../../contexts/ThemeContext";
import { Sun, Moon, Laptop } from "lucide-react";
import { Dropdown } from "../ui";

export function ThemeToggle() {
  const { theme, setTheme } = useTheme();

  const options = [
    { value: "light", label: "Light", icon: <Sun size={16} /> },
    { value: "dark", label: "Dark", icon: <Moon size={16} /> },
    { value: "system", label: "System", icon: <Laptop size={16} /> },
  ];

  return (
    <Dropdown
      options={options}
      value={theme}
      onChange={(value) => setTheme(value as "light" | "dark" | "system")}
    />
  );
}

================
File: src/app/components/ui/Dropdown.tsx
================
"use client";

import React, { useState, useRef, useEffect } from "react";
import { ChevronDown } from "lucide-react";

interface DropdownProps {
  options: { value: string; label: string; icon: React.ReactNode }[];
  value: string;
  onChange: (value: string) => void;
}

export function Dropdown({ options, value, onChange }: DropdownProps) {
  const [isOpen, setIsOpen] = useState(false);
  const dropdownRef = useRef<HTMLDivElement>(null);

  const handleSelect = (optionValue: string) => {
    onChange(optionValue);
    setIsOpen(false);
  };

  useEffect(() => {
    const handleClickOutside = (event: MouseEvent) => {
      if (
        dropdownRef.current &&
        !dropdownRef.current.contains(event.target as Node)
      ) {
        setIsOpen(false);
      }
    };

    document.addEventListener("mousedown", handleClickOutside);
    return () => {
      document.removeEventListener("mousedown", handleClickOutside);
    };
  }, []);

  const selectedOption = options.find((option) => option.value === value);

  return (
    <div className="relative" ref={dropdownRef}>
      <button
        onClick={() => setIsOpen(!isOpen)}
        className="flex items-center justify-between w-full px-4 py-2 text-sm font-medium text-foreground bg-secondary-bg rounded-md hover:bg-primary/10 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary"
        aria-haspopup="listbox"
        aria-expanded={isOpen}
      >
        <span className="flex items-center">
          {selectedOption?.icon}
          <span className="ml-2">{selectedOption?.label}</span>
        </span>
        <ChevronDown className="w-5 h-5 ml-2" />
      </button>
      {isOpen && (
        <ul
          className="absolute z-10 w-full py-1 mt-1 overflow-auto text-base bg-secondary-bg rounded-md shadow-lg max-h-60 ring-1 ring-black ring-opacity-5 focus:outline-none sm:text-sm"
          role="listbox"
        >
          {options.map((option) => (
            <li
              key={option.value}
              className={`${
                option.value === value
                  ? "text-primary bg-primary/10"
                  : "text-foreground"
              } cursor-default select-none relative py-2 pl-3 pr-9 hover:bg-primary/10`}
              role="option"
              aria-selected={option.value === value}
              onClick={() => handleSelect(option.value)}
            >
              <div className="flex items-center">
                {option.icon}
                <span className="ml-2 block truncate">{option.label}</span>
              </div>
            </li>
          ))}
        </ul>
      )}
    </div>
  );
}

================
File: src/app/components/ui/index.tsx
================
export { Dropdown } from "./Dropdown";

================
File: src/app/components/ui/LinkButton.tsx
================
import React from "react";
import Link from "next/link";

interface LinkButtonProps {
  href: string;
  children: React.ReactNode;
  className?: string;
}

export function LinkButton({
  href,
  children,
  className = "",
}: LinkButtonProps) {
  return (
    <Link
      href={href}
      className={`
        relative pb-2 tracking-wider text-sm uppercase
        after:content-[''] after:absolute after:w-full
        after:scale-x-0 after:h-0.5 after:bottom-0 after:left-0
        after:bg-primary after:origin-right
        after:transition-transform after:duration-300 after:ease-out
        hover:after:scale-x-100 hover:after:origin-left
        ${className}
      `}
    >
      {children}
    </Link>
  );
}

================
File: src/app/components/ui/WebTechnology.tsx
================
import React from "react";

interface WebTechnologyProps {
  name: string;
  icon: React.ReactNode;
}

export function WebTechnology({ name, icon }: WebTechnologyProps) {
  return (
    <div className="flex items-center space-x-2 p-2 bg-secondary-bg rounded-md shadow-sm hover:shadow-md transition-shadow duration-300">
      <div className="w-6 h-6">{icon}</div>
      <span className="text-sm font-medium">{name}</span>
    </div>
  );
}

================
File: src/app/contexts/ThemeContext.tsx
================
"use client";

import React, { createContext, useContext, useEffect, useState } from "react";

type Theme = "light" | "dark" | "system";

type ThemeContextType = {
  theme: Theme;
  setTheme: (theme: Theme) => void;
};

const ThemeContext = createContext<ThemeContextType | undefined>(undefined);

export function ThemeProvider({ children }: { children: React.ReactNode }) {
  const [theme, setTheme] = useState<Theme>("system");

  useEffect(() => {
    const storedTheme = localStorage.getItem("theme") as Theme | null;
    if (storedTheme) {
      setTheme(storedTheme);
    }
  }, []);

  useEffect(() => {
    localStorage.setItem("theme", theme);
    if (
      theme === "dark" ||
      (theme === "system" &&
        window.matchMedia("(prefers-color-scheme: dark)").matches)
    ) {
      document.documentElement.classList.add("dark");
    } else {
      document.documentElement.classList.remove("dark");
    }
  }, [theme]);

  return (
    <ThemeContext.Provider value={{ theme, setTheme }}>
      {children}
    </ThemeContext.Provider>
  );
}

export function useTheme() {
  const context = useContext(ThemeContext);
  if (context === undefined) {
    throw new Error("useTheme must be used within a ThemeProvider");
  }
  return context;
}

================
File: src/app/globals.css
================
@tailwind base;
@tailwind components;
@tailwind utilities;

@layer base {
  :root {
    --background: 210 20% 98%;
    --foreground: 210 29% 16%;
    --secondary-bg: 210 14% 89%;

    /* Primary color and its variations */
    --primary-50: 22 100% 95%;
    --primary-100: 22 100% 90%;
    --primary-200: 22 100% 80%;
    --primary-300: 22 99% 70%;
    --primary-400: 22 99% 60%;
    --primary-500: 22 99% 50%;
    --primary: 22 99% 44%; /* This is your current primary color */
    --primary-600: 22 99% 40%;
    --primary-700: 22 99% 35%;
    --primary-800: 22 99% 30%;
    --primary-900: 22 99% 25%;
    --primary-950: 22 99% 15%;

    --primary-foreground: 210 20% 98%;
    --secondary: 174 69% 52%;
    --secondary-foreground: 210 29% 16%;
    --accent: 27 29% 87%;
    --accent-foreground: 210 29% 16%;
  }

  .dark {
    --background: 210 22% 16%;
    --foreground: 0 0% 98%;
    --secondary-bg: 210 18% 24%;

    /* Adjusted primary colors for dark mode */
    --primary-50: 22 85% 95%;
    --primary-100: 22 85% 90%;
    --primary-200: 22 85% 80%;
    --primary-300: 22 85% 70%;
    --primary-400: 22 85% 60%;
    --primary-500: 22 85% 50%;
    --primary: 22 85% 44%; /* Slightly desaturated in dark mode */
    --primary-600: 22 85% 40%;
    --primary-700: 22 85% 35%;
    --primary-800: 22 85% 30%;
    --primary-900: 22 85% 25%;
    --primary-950: 22 85% 15%;

    --primary-foreground: 0 0% 98%;
    --secondary: 174 69% 52%;
    --secondary-foreground: 210 22% 16%;
    --accent: 27 29% 87%;
    --accent-foreground: 210 22% 16%;
  }
}

@layer base {
  body {
    @apply bg-background text-foreground;
  }
}

================
File: src/app/layout.tsx
================
import type { Metadata } from "next";
import { ThemeProvider } from "./contexts/ThemeContext";
import localFont from "next/font/local";
import "./globals.css";
import { Header } from "./components/layout";

const geistSans = localFont({
  src: [
    {
      path: "./fonts/GeistVF.woff",
      weight: "100 900",
      style: "normal",
    },
  ],
  variable: "--font-geist-sans",
});

const geistMono = localFont({
  src: [
    {
      path: "./fonts/GeistMonoVF.woff",
      weight: "100 900",
      style: "normal",
    },
  ],
  variable: "--font-geist-mono",
});

export const metadata: Metadata = {
  title: "My Portfolio",
  description: "A showcase of my work as a Developer, Designer, and Freelancer",
};

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
    <html lang="en" suppressHydrationWarning>
      <body
        className={`${geistSans.variable} ${geistMono.variable} font-sans antialiased`}
      >
        <ThemeProvider>
          <div className="min-h-screen flex flex-col">
            <Header />
            <main className="flex-1 flex items-center justify-center">
              {children}
            </main>
            <footer className="p-4 text-center text-sm text-secondary-foreground">
              © 2024 My Portfolio. All rights reserved.
            </footer>
          </div>
        </ThemeProvider>
      </body>
    </html>
  );
}

================
File: src/app/page.tsx
================
import AnimatedHome from "./components/layout/AnimatedHome";
import { Hero } from "./components/layout";
import { LinkButton } from "./components/ui/LinkButton";

export default function Home() {
  return (
    // <AnimatedHome>
    <div className="flex min-h-screen flex-col items-center justify-center">
      <Hero />
      <div className="">
        <p className="text-xl max-w-2xl mb-12">
          I am a Software Developer with now over five years of professional
          experience crafting user-interfaces for B2B SaaS product and high
          traffic client-facing websites, I am specialized in all things
          JavaScript, creating elegant user experiences for complex software
          solutions with a proven track record leading cross-functional teams in
          fast paced environments.
        </p>
        <p className="text-xl max-w-2xl mb-12">
          Driven by a passion for coding excellence, I thrive on pushing the
          boundaries of what's possible in web development. I'm an active
          contributor to the global software community, believing in the power
          of collaboration to accelerate innovation.
        </p>
        <p className="text-xl max-w-2xl mb-12">
          Always eager to embrace new technologies, I try to stay at the
          forefront of web development trends to deliver state-of-the-art
          solutions for clients and users alike.
        </p>
      </div>
      <div className="grid grid-cols-1 md:grid-cols-3 gap-8">
        <div className="text-center p-6 bg-secondary-bg rounded-lg shadow-md">
          <h2 className="text-2xl font-semibold mb-2 text-primary">
            Developer
          </h2>
          <p>Crafting efficient and scalable code solutions</p>
        </div>
        <div className="text-center p-6 bg-secondary-bg rounded-lg shadow-md">
          <h2 className="text-2xl font-semibold mb-2 text-primary">Designer</h2>
          <p>Creating intuitive and visually appealing interfaces</p>
        </div>
        <div className="text-center p-6 bg-secondary-bg rounded-lg shadow-md">
          <h2 className="text-2xl font-semibold mb-2 text-primary">
            Freelancer
          </h2>
          <p>Delivering high-quality projects on time and on budget</p>
        </div>
      </div>
    </div>
    // </AnimatedHome>
  );
}

================
File: .eslintrc.json
================
{
  "extends": ["next/core-web-vitals", "next/typescript"]
}

================
File: .gitignore
================
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.*
.yarn/*
!.yarn/patches
!.yarn/plugins
!.yarn/releases
!.yarn/versions

# testing
/coverage

# next.js
/.next/
/out/

# production
/build

# misc
.DS_Store
*.pem

# debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# env files (can opt-in for committing if needed)
.env*

# vercel
.vercel

# typescript
*.tsbuildinfo
next-env.d.ts

================
File: next.config.ts
================
import type { NextConfig } from "next";

const nextConfig: NextConfig = {
  /* config options here */
};

export default nextConfig;

================
File: package.json
================
{
  "name": "portfolio-v2",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev --turbopack",
    "build": "next build",
    "start": "next start",
    "lint": "next lint"
  },
  "dependencies": {
    "framer-motion": "^11.12.0",
    "lucide-react": "^0.462.0",
    "motion": "^11.12.0",
    "next": "15.0.3",
    "next-themes": "^0.4.3",
    "react": "19.0.0-rc-66855b96-20241106",
    "react-dom": "19.0.0-rc-66855b96-20241106",
    "react-icons": "^5.3.0"
  },
  "devDependencies": {
    "@types/node": "^20",
    "@types/react": "^18",
    "@types/react-dom": "^18",
    "eslint": "^8",
    "eslint-config-next": "15.0.3",
    "postcss": "^8",
    "tailwindcss": "^3.4.1",
    "typescript": "^5"
  }
}

================
File: postcss.config.mjs
================
/** @type {import('postcss-load-config').Config} */
const config = {
  plugins: {
    tailwindcss: {},
  },
};

export default config;

================
File: README.md
================
This is a [Next.js](https://nextjs.org) project bootstrapped with [`create-next-app`](https://nextjs.org/docs/app/api-reference/cli/create-next-app).

## Getting Started

First, run the development server:

```bash
npm run dev
# or
yarn dev
# or
pnpm dev
# or
bun dev
```

Open [http://localhost:3000](http://localhost:3000) with your browser to see the result.

You can start editing the page by modifying `app/page.tsx`. The page auto-updates as you edit the file.

This project uses [`next/font`](https://nextjs.org/docs/app/building-your-application/optimizing/fonts) to automatically optimize and load [Geist](https://vercel.com/font), a new font family for Vercel.

## Learn More

To learn more about Next.js, take a look at the following resources:

- [Next.js Documentation](https://nextjs.org/docs) - learn about Next.js features and API.
- [Learn Next.js](https://nextjs.org/learn) - an interactive Next.js tutorial.

You can check out [the Next.js GitHub repository](https://github.com/vercel/next.js) - your feedback and contributions are welcome!

## Deploy on Vercel

The easiest way to deploy your Next.js app is to use the [Vercel Platform](https://vercel.com/new?utm_medium=default-template&filter=next.js&utm_source=create-next-app&utm_campaign=create-next-app-readme) from the creators of Next.js.

Check out our [Next.js deployment documentation](https://nextjs.org/docs/app/building-your-application/deploying) for more details.

================
File: tailwind.config.ts
================
import type { Config } from "tailwindcss";

const config: Config = {
  content: [
    "./src/pages/**/*.{js,ts,jsx,tsx,mdx}",
    "./src/components/**/*.{js,ts,jsx,tsx,mdx}",
    "./src/app/**/*.{js,ts,jsx,tsx,mdx}",
  ],
  darkMode: "class",
  theme: {
    extend: {
      fontFamily: {
        sans: ["var(--font-geist-sans)", "system-ui", "sans-serif"],
        mono: ["var(--font-geist-mono)", "monospace"],
      },
      colors: {
        background: "hsl(var(--background))",
        foreground: "hsl(var(--foreground))",
        "secondary-bg": "hsl(var(--secondary-bg))",
        primary: {
          DEFAULT: "hsl(var(--primary))",
          foreground: "hsl(var(--primary-foreground))",
          50: "hsl(var(--primary-50))",
          100: "hsl(var(--primary-100))",
          200: "hsl(var(--primary-200))",
          300: "hsl(var(--primary-300))",
          400: "hsl(var(--primary-400))",
          500: "hsl(var(--primary-500))",
          600: "hsl(var(--primary-600))",
          700: "hsl(var(--primary-700))",
          800: "hsl(var(--primary-800))",
          900: "hsl(var(--primary-900))",
          950: "hsl(var(--primary-950))",
        },
        secondary: {
          DEFAULT: "hsl(var(--secondary))",
          foreground: "hsl(var(--secondary-foreground))",
        },
        accent: {
          DEFAULT: "hsl(var(--accent))",
          foreground: "hsl(var(--accent-foreground))",
        },
      },
    },
  },
  plugins: [],
};

export default config;

================
File: tsconfig.json
================
{
  "compilerOptions": {
    "target": "ES2017",
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "bundler",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "plugins": [
      {
        "name": "next"
      }
    ],
    "paths": {
      "@/*": ["./src/*"]
    }
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts"],
  "exclude": ["node_modules"]
}
